* Main emacs config

** Make fonts bigger
#+begin_src elisp :tangle ./init.el
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(custom-enabled-themes '(modus-vivendi)))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(default ((t (:family "Noto Sans Mono" :foundry "GOOG" :slant normal :weight bold :height 180 :width normal)))))
#+end_src

** ELPACA Config

*** Prevent default emacs package manager from loading
#+begin_src elisp :tangle ./early-init.el
  (setq package-enable-at-startup nil)
#+end_src

*** Download and setup elpaca
#+begin_src elisp :tangle ./init.el
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                   ,@(when-let ((depth (plist-get order :depth)))
                                                       (list (format "--depth=%d" depth) "--no-single-branch"))
                                                   ,(plist-get order :repo) ,repo))))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

*** Setup wrapper for use-package
#+begin_src elisp :tangle ./init.el
  ;; Install a package via the elpaca macro
  ;; See the "recipes" section of the manual for more details.

  ;; (elpaca example-package)

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))

  ;;When installing a package used in the init file itself,
  ;;e.g. a package which adds a use-package key word,
  ;;use the :wait recipe keyword to block until that package is installed/configured.
  ;;For example:
  ;;(use-package general :ensure (:wait t) :demand t)
#+end_src

corfu
** Setup modus theme
#+begin_src elisp :tangle ./init.el
  ; (setq modus-themes-org-blocks 'gray-background)
  (setq modus-themes-org-blocks 'tinted-background)
  (load-theme 'modus-vivendi)
#+end_src

** Rainbow color stuff
#+begin_src elisp :tangle ./init.el
  (use-package rainbow-delimiters
    :ensure t
    :demand t
    :init
    (add-hook 'conf-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'dired-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'text-mode-hook 'rainbow-delimiters-mode))

  (use-package rainbow-identifiers
    :ensure t
    :demand t
    :init
    (add-hook 'conf-mode-hook 'rainbow-identifiers-mode)
    (add-hook 'dired-mode-hook 'rainbow-identifiers-mode)
    (add-hook 'prog-mode-hook 'rainbow-identifiers-mode)
    (add-hook 'text-mode-hook 'rainbow-identifiers-mode))
#+end_src

** Keychord stuff
#+begin_src elisp :tangle ./init.el
  (use-package key-chord
    :ensure t
    :demand t
    :init
    (key-chord-define-global "1q" 'hydra-all/body)
    (key-chord-define-global "2q" 'hydra-all/body)

    (key-chord-define-global "2w" 'myfun/other_window_and_menu)
    (key-chord-define-global "3w" 'myfun/other_window_and_menu)

    (key-chord-define-global "e3" 'counsel-switch-buffer)
    (key-chord-define-global "e4" 'counsel-switch-buffer)

    (key-chord-define-global "5t" 'hydra-format/body)
    (key-chord-define-global "6t" 'hydra-format/body)

    (key-chord-define-global "7y" 'hydra-window/body)
    (key-chord-define-global "6y" 'hydra-window/body)

    (key-chord-define-global "8u" 'undo-tree-visualize)
    (key-chord-define-global "7u" 'undo-tree-visualize)

    (key-chord-define-global "i9" 'hydra-counsel-file/body)
    (key-chord-define-global "i8" 'hydra-counsel-file/body)

    (key-chord-define-global "o9" 'hydra-org/body)
    (key-chord-define-global "o0" 'hydra-org/body)

    (key-chord-define-global "p=" 'hydra-projectile/body)
    (key-chord-define-global "p-" 'hydra-projectile/body)
    (key-chord-define-global "p0" 'hydra-projectile/body)
    (key-chord-define-global "p9" 'hydra-projectile/body)

    (key-chord-define-global "()" 'myfun/bb1)
    (key-chord-define-global "[]" 'myfun/bb2)
    (key-chord-define-global "<>" 'myfun/bb3)
    (key-chord-define-global "{}" 'myfun/bb4)

    (key-chord-define-global "(*" "()\C-b")
    (key-chord-define-global "p[" "[]\C-b")
    (key-chord-define-global "M<" "<>\C-b")
    (key-chord-define-global "P{" "{}\C-b")

    (key-chord-define-global ";." "->")

    (key-chord-define-global "o="  'evil-window-split)
    (key-chord-define-global "p="  'evil-window-split)
    (key-chord-define-global "[="  'evil-window-split)
    (key-chord-define-global "]="  'evil-window-split)
    (key-chord-define-global "\\=" 'evil-window-split)

    (key-chord-define-global "\\'" 'evil-window-vsplit)
    (key-chord-define-global "\\;" 'evil-window-vsplit)
    (key-chord-define-global "\\l" 'evil-window-vsplit)
    (key-chord-define-global "\\]" 'evil-window-vsplit)
    (key-chord-define-global "\\[" 'evil-window-vsplit))
#+end_src

** org stuff
#+begin_src elisp :tangle ./init.el
  (use-package org :ensure t :demand t :init
    (setq org-confirm-babel-evaluate nil)
    (org-babel-do-load-languages
     'org-babel-load-languages '(
                                 (emacs-lisp . t)
                                 (python . t)
                                 (R . t)
                                 (eshell . t)
                                 (awk . t)
                                 (sql . t)
                                 (shell . t)
                                 (sqlite . t)
                                 )))
#+end_src

** Vertico
#+begin_src elisp :tangle ./init.el
  (use-package vertico :ensure t :demand t :init (vertico-mode 1))
#+end_src

** evil
#+begin_src elisp :tangle ./init.el
  ;; Expands to: (elpaca evil (use-package evil :demand t))
  (use-package evil :ensure t :demand t :init (evil-mode 1))
#+end_src

** helpful
#+begin_src elisp :tangle ./init.el
  (use-package helpful :ensure t :demand t :init)
#+end_src

** yasnippet related
#+begin_src elisp :tangle ./init.el
  (use-package yasnippet-snippets :ensure t :demand t)
  (use-package yasnippet :ensure t :demand t :init (yas-global-mode 1))
#+end_src

** emacs config
#+begin_src elisp :tangle ./init.el
  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause evaluate the declaration immediately. It is not deferred.
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))
#+end_src

** work space
#+begin_src elisp
  (save-buffer)
  (org-babel-tangle)
#+end_src

#+RESULTS:
| /home/asd/GITLAB/aravindhv101/config_storage/emacs.d/early-init.el | /home/asd/GITLAB/aravindhv101/config_storage/emacs.d/init.el |
