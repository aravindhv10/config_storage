* COMMENT work space
#+begin_src emacs-lisp :results silent
  (save-buffer)
  (org-babel-tangle)
  (async-shell-command "./main.unify.sh" "log" "err")
#+end_src

* Main python code

** Important import related configs

*** Evaluate path of the base directory of the package
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.config.py
  import os

  try:
      __file__
  except:
      basepath = "."
  else:
      basepath = os.path.abspath(os.path.dirname(__file__) + "/")
#+end_src

*** Append the path to python search path
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.config.py
  import sys

  sys.path.append(os.path.dirname(basepath))
#+end_src

*** Import common_utils
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.import.py
  from common_utils import *
#+end_src

*** Import functions to get file list
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.import.py
  from get_file_list import *
#+end_src

** Code for obtaining and releasing a read lock on a file

*** Import fcntl
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.import.py
  import fcntl
#+end_src

*** Actual function

**** obtain
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.function.py
  def obtain_lock(infd):
      fcntl.flock(
          infd.fileno(),
          fcntl.LOCK_SH,
      )
#+end_src

**** release
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.function.py
  def release_lock(infd):
      fcntl.flock(
          infd.fileno(),
          fcntl.LOCK_UN,
      )
#+end_src

** Function to read images using opencv with locking

*** Import cv2 and numpy
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.import.py
  import cv2
  import numpy as np
#+end_src

*** Read images to torch tensors
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.function.py
  def read_image(path_file_image_input):
      tmpfd = open(
          path_file_image_input,
          "rb",
      )

      obtain_lock(infd=tmpfd)

      image = np.frombuffer(
          tmpfd.read(),
          np.uint8,
      )

      release_lock(infd=tmpfd)
      tmpfd.close()

      image = cv2.imdecode(
          image,
          cv2.IMREAD_COLOR,
      )

      image = cv2.cvtColor(
          src=image,
          code=cv2.COLOR_BGR2RGB,
      )

      return image
#+end_src

*** Read image and unlink
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.function.py
  def read_image_and_unlink(path_file_image_input):
      res = read_image(path_file_image_input=path_file_image_input)
      os.unlink(path_file_image_input)
      return res
#+end_src

** Read normalized image

*** Imports
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.import.py
  from albumentations.pytorch import ToTensorV2
  import albumentations as A
  import cv2
  import numpy as np
  import torch
#+end_src

*** Main class to read the image
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.class.py
  class class_read_image_processed:
      def __init__(
          self,
          do_unlink=True,
      ):
          self.do_unlink = do_unlink

          self.imagenet_mean = [
              0.485,
              0.456,
              0.406,
          ]

          self.imagenet_std = [
              0.229,
              0.224,
              0.225,
          ]

          self.transform = A.Compose(
              [
                  A.Normalize(
                      mean=self.imagenet_mean,
                      std=self.imagenet_std,
                  ),
                  A.Resize(
                      height=224,
                      width=224,
                      interpolation=cv2.INTER_AREA,
                      mask_interpolation=cv2.INTER_NEAREST_EXACT,
                  ),
                  ToTensorV2(),
              ]
          )

          (
              self.device,
              self.dtype,
          ) = get_good_device_and_dtype()

      def __call__(
          self,
          path_file_image_input,
      ):
          if self.do_unlink:
              image = read_image_and_unlink(path_file_image_input=path_file_image_input)
          else:
              image = read_image(path_file_image_input=path_file_image_input)

          image = self.transform(image=image)["image"].to(
              device=self.device,
              dtype=self.dtype,
          )

          return image
#+end_src

** Main dataset

*** Dataset classes
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.import.py
  import torch
  from torch.utils.data import Dataset
#+end_src

*** Import numpy
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.import.py
  import numpy as np
#+end_src

*** The main class to provide the dataset
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.class.py
  class CustomImageDataset(Dataset):
      def __init__(
          self,
          list_data_input,
      ):
          self.list_data_input = list_data_input
          self.actual_length = len(self.list_data_input)
          self.main_read_image_processed = class_read_image_processed()

      def __len__(self):
          return self.actual_length

      def __getitem__(
          self,
          i,
      ):
          path_file_image = self.list_data_input[i]
          tensor = self.main_read_image_processed(path_file_image)

          return (
              path_file_image,
              tensor,
          )
#+end_src

*** Get the torch dataset with files under /data/input/
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.function.py
  def get_dataset(path_dir_input="/data/input"):
      slave = CustomImageDataset(
          list_data_input=get_list_path_file_image_input(path_dir_input=path_dir_input)
      )

      return slave
#+end_src

** Function for getting usable data loader

*** Import dataloader
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.import.py
  from torch.utils.data import DataLoader
#+end_src

*** The main function
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.function.py
  def get_data_loader(
      path_dir_input="/data/input",
      batch_size=16,
      num_workers=4,
  ):
      dataset = get_dataset(path_dir_input=path_dir_input)

      return DataLoader(
          dataset,
          batch_size=batch_size,
          shuffle=False,
          num_workers=num_workers,
      )
#+end_src

*** COMMENT Initialize the loader
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.execute.py
  loader = get_data_loader(
      path_dir_input=".",
      batch_size=1,
  )
#+end_src

** Main class for inference

*** Import transformers
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.import.py
  from transformers import ViTForImageClassification
#+end_src

*** Main inference class
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.class.py
  class infer_slave:
      def __init__(self):
          self.MODEL_NAME = "motheecreator/vit-Facial-Expression-Recognition"
          self.model = ViTForImageClassification.from_pretrained(self.MODEL_NAME)

          (
              self.device,
              self.dtype,
          ) = get_good_device_and_dtype()

      def __call__(
          self,
          image,
      ):
          with torch.no_grad():
              y = self.model(image)

          return y
#+end_src

*** COMMENT Create instance of class
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.execute.py
  slave = infer_slave()
#+end_src

** Class for infering on all files under a directory
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.class.py
  class inference_wrapper:
      def __init__(self):
          self.slave = infer_slave()

      def __call__(
          self,
          path_dir_prefix_input,
      ):
          loader = get_data_loader(
              path_dir_input=path_dir_prefix_input,
              batch_size=1,
          )

          for i in loader:
              (
                  path,
                  x,
              ) = i
              y = slave(x)
              open(path[: path.rfind(".")] + ".txt", "w").write(str(y))
              os.unlink(path)
#+end_src

** COMMENT Try running inference
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.execute.py
  for i in loader:
      (
          path,
          x,
      ) = i
      y = slave(x)
      print(y)
#+end_src

* Script to unify

** Important functions

*** Process the python code stream
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./main.unify.sh
  P () {
      expand | ruff format -
  }
#+end_src

*** Read the python file
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./main.unify.sh
  R () {
      grep -v '^#!/usr/bin/python3$' "./${1}" | P
  }
#+end_src

*** Remove the python file
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./main.unify.sh
  C () {
      rm -vf -- "./${1}"
  }
#+end_src

*** Add files to git
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./main.unify.sh
  A () {
      git add "./${1}"
  }
#+end_src

** Actual working scripts

*** Unifying the python code
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./main.unify.sh
  (
      echo '#!/usr/bin/env python3'
      R main.config.py
      R main.import.py | sort | uniq
      R main.function.py
      R main.class.py
      R main.execute.py
  ) | P > ./main.py
#+end_src

*** Cleanup residual files
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./main.unify.sh
  C main.class.py
  C main.config.py
  C main.execute.py
  C main.function.py
  C main.import.py
  C main.unify.sh
#+end_src

*** Add stuff to git
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./main.unify.sh
  A main.py
  A README.org
#+end_src

* Sample

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./main.unify.sh
#+end_src

#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.config.py
#+end_src

#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.import.py
#+end_src

#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.function.py
#+end_src

#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.class.py
#+end_src

#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.execute.py
#+end_src
