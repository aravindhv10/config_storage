* COMMENT work space
#+begin_src emacs-lisp :results silent
  (save-buffer)
  (org-babel-tangle)
  (async-shell-command "./main.unify.sh" "log" "err")
#+end_src

* Main python code

** Important import related configs

*** Evaluate path of the base directory of the package
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.config.py
  import os

  try:
      __file__
  except:
      basepath = "."
  else:
      basepath = os.path.abspath(os.path.dirname(__file__) + "/")
#+end_src

*** Append the path to python search path
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.config.py
  import sys

  sys.path.append(basepath)
#+end_src

** Some commonly used safe functions

*** Create directory recursively
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.function.py
  def mkdir_safe(out_path):
      if type(out_path) == str:
          if len(out_path) > 0:
              os.makedirs(out_path, exist_ok=True)
#+end_src

*** Remove directory if it exists
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.function.py
  def rmdir_safe(out_path):
      if type(out_path) == str:
          if len(out_path) > 0:
              if os.path.exists(out_path):
                  os.rmdir(out_path)
#+end_src

*** Remove file
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.function.py
  def unlink_safe(out_path):
      if type(out_path) == str:
          if len(out_path) > 0:
              if os.path.exists(out_path):
                  os.unlink(out_path)
#+end_src

*** remove outermost extension from name of file
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.function.py
  def remove_extension(path_input):
      loc = path_input.rfind(".")
      return path_input[0:loc]
#+end_src

** Find good device and dtype

*** Importing torch
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.import.py
  import torch
#+end_src

*** Main function
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.function.py
  def get_good_device_and_dtype():
      device = "cpu"
      dtype = torch.float32

      if torch.cuda.is_available():
          torch.backends.cudnn.benchmark = True
          device = "cuda:0"
          dtype = torch.float16
          if torch.cuda.get_device_capability()[0] >= 8:
              dtype = torch.bfloat16

      device = torch.device(device)

      return (
          device,
          dtype,
      )
#+end_src

* Script to unify

** Important functions

*** Process the python code stream
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./main.unify.sh
  P () {
      expand | ruff format -
  }
#+end_src

*** Read the python file
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./main.unify.sh
  R () {
      grep -v '^#!/usr/bin/python3$' "./${1}" | P
  }
#+end_src

*** Remove the python file
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./main.unify.sh
  C () {
      rm -vf -- "./${1}"
  }
#+end_src

*** Add files to git
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./main.unify.sh
  A () {
      git add "./${1}"
  }
#+end_src

** Actual working scripts

*** Unifying the python code
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./main.unify.sh
  (
      echo '#!/usr/bin/env python3'
      R main.config.py
      R main.import.py | sort | uniq
      R main.function.py
      R main.class.py
      R main.execute.py
  ) | P > ./__init__.py
#+end_src

*** Cleanup residual files
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./main.unify.sh
  C main.class.py
  C main.config.py
  C main.execute.py
  C main.function.py
  C main.import.py
  C main.unify.sh
#+end_src

*** Add stuff to git
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./main.unify.sh
  A __init__.py
  A README.org
#+end_src

* Sample

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./main.unify.sh
#+end_src

#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.config.py
#+end_src

#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.import.py
#+end_src

#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.function.py
#+end_src

#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.class.py
#+end_src

#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./main.execute.py
#+end_src
