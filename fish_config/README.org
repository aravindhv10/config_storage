* work space
#+begin_src emacs-lisp
  (save-buffer)
  (org-babel-tangle)
  (async-shell-command "./copy.sh")
#+end_src

#+RESULTS:
: #<window 17 on *Async Shell Command*>

* Main config

** path
#+begin_src conf :tangle ./config.fish
  set PATH {$HOME}/.cargo/bin {$HOME}/bin {$PATH}
#+end_src

** sudo without password
#+begin_src conf :tangle ./config.fish
  export SUDO_ASKPASS={$HOME}/SUDO_ASKPASS
#+end_src

** COMMENT Functions which were moved into abbr
#+begin_src conf :tangle ./config.fish
  function top
      htop $argv
  end

  function mysync
      rsync '-avh' '--progress' $argv
      sync ; sync
  end

  function ls
      lsd $argv
  end

  function cat
      bat $argv
  end

  function du
      dust $argv
  end
#+end_src

** nice functions
#+begin_src conf :tangle ./config.fish
  function sudo
      /usr/bin/sudo -A $argv
  end

  function puthere
      mysync (cat /tmp/list) ./
  end

  function txn
      tmux new-window $argv
  end

  function txp
      tmux split-pane $argv
  end

  function xs
      cd (fd -t d | sk)
  end

  function lh
      rm -vf -- {$HOME}/link
      ln -vfs -- (realpath .) {$HOME}/link
  end

  function mk
      fd . | sk > ./mark.txt
      cat ./mark.txt
  end
#+end_src

** nice abbreviations
#+begin_src conf :tangle ./config.fish
  abbr --add --position command -- ls lsd
  abbr --add --position command -- top btm -b -T --process_command
  abbr --add --position command -- cat bat
  abbr --add --position command -- du dust
  abbr --add --position command -- cd z
#+end_src

** yazi
#+begin_src conf :tangle ./config.fish
  function y
      set tmp (mktemp -t "yazi-cwd.XXXXXX")
      yazi $argv --cwd-file="$tmp"
      if set cwd (command cat -- "$tmp"); and [ -n "$cwd" ]; and [ "$cwd" != "$PWD" ]
          builtin cd -- "$cwd"
      end
      rm -f -- "$tmp"
  end
#+end_src

** zoxide cd
#+begin_src conf :tangle ./config.fish
  # =============================================================================
  #
  # Utility functions for zoxide.
  #

  # pwd based on the value of _ZO_RESOLVE_SYMLINKS.
  function __zoxide_pwd
      builtin pwd -L
  end

  # A copy of fish's internal cd function. This makes it possible to use
  # `alias cd=z` without causing an infinite loop.
  if ! builtin functions --query __zoxide_cd_internal
      string replace --regex -- '^function cd\s' 'function __zoxide_cd_internal ' <$__fish_data_dir/functions/cd.fish | source
  end

  # cd + custom logic based on the value of _ZO_ECHO.
  function __zoxide_cd
      if set -q __zoxide_loop
          builtin echo "zoxide: infinite loop detected"
          builtin echo "Avoid aliasing `cd` to `z` directly, use `zoxide init --cmd=cd fish` instead"
          return 1
      end
      __zoxide_loop=1 __zoxide_cd_internal $argv
  end

  # =============================================================================
  #
  # Hook configuration for zoxide.
  #

  # Initialize hook to add new entries to the database.
  function __zoxide_hook --on-variable PWD
      test -z "$fish_private_mode"
      and command zoxide add -- (__zoxide_pwd)
  end

  # =============================================================================
  #
  # When using zoxide with --no-cmd, alias these internal functions as desired.
  #

  # Jump to a directory using only keywords.
  function __zoxide_z
      set -l argc (builtin count $argv)
      if test $argc -eq 0
          __zoxide_cd $HOME
      else if test "$argv" = -
          __zoxide_cd -
      else if test $argc -eq 1 -a -d $argv[1]
          __zoxide_cd $argv[1]
      else if test $argc -eq 2 -a $argv[1] = --
          __zoxide_cd -- $argv[2]
      else
          set -l result (command zoxide query --exclude (__zoxide_pwd) -- $argv)
          and __zoxide_cd $result
      end
  end

  # Completions.
  function __zoxide_z_complete
      set -l tokens (builtin commandline --current-process --tokenize)
      set -l curr_tokens (builtin commandline --cut-at-cursor --current-process --tokenize)

      if test (builtin count $tokens) -le 2 -a (builtin count $curr_tokens) -eq 1
          # If there are < 2 arguments, use `cd` completions.
          complete --do-complete "'' "(builtin commandline --cut-at-cursor --current-token) | string match --regex -- '.*/$'
      else if test (builtin count $tokens) -eq (builtin count $curr_tokens)
          # If the last argument is empty, use interactive selection.
          set -l query $tokens[2..-1]
          set -l result (command zoxide query --exclude (__zoxide_pwd) --interactive -- $query)
          and __zoxide_cd $result
          and builtin commandline --function cancel-commandline repaint
      end
  end
  complete --command __zoxide_z --no-files --arguments '(__zoxide_z_complete)'

  # Jump to a directory using interactive search.
  function __zoxide_zi
      set -l result (command zoxide query --interactive -- $argv)
      and __zoxide_cd $result
  end

  # =============================================================================
  #
  # Commands for zoxide. Disable these using --no-cmd.
  #

  abbr --erase z &>/dev/null
  alias z=__zoxide_z

  abbr --erase zi &>/dev/null
  alias zi=__zoxide_zi

  # =============================================================================
  #
  # To initialize zoxide, add this to your configuration (usually
  # ~/.config/fish/config.fish):
  #
  #   zoxide init fish | source
#+end_src

** atuin history
#+begin_src conf :tangle ./config.fish
  set -gx ATUIN_SESSION (atuin uuid)
  set --erase ATUIN_HISTORY_ID

  function _atuin_preexec --on-event fish_preexec
      if not test -n "$fish_private_mode"
          set -g ATUIN_HISTORY_ID (atuin history start -- "$argv[1]")
      end
  end

  function _atuin_postexec --on-event fish_postexec
      set -l s $status

      if test -n "$ATUIN_HISTORY_ID"
          ATUIN_LOG=error atuin history end --exit $s -- $ATUIN_HISTORY_ID &>/dev/null &
          disown
      end

      set --erase ATUIN_HISTORY_ID
  end

  function _atuin_search
      set -l keymap_mode
      switch $fish_key_bindings
          case fish_vi_key_bindings
              switch $fish_bind_mode
                  case default
                      set keymap_mode vim-normal
                  case insert
                      set keymap_mode vim-insert
              end
          case '*'
              set keymap_mode emacs
      end

      # In fish 3.4 and above we can use `"$(some command)"` to keep multiple lines separate;
      # but to support fish 3.3 we need to use `(some command | string collect)`.
      # https://fishshell.com/docs/current/relnotes.html#id24 (fish 3.4 "Notable improvements and fixes")
      set -l ATUIN_H (ATUIN_SHELL_FISH=t ATUIN_LOG=error ATUIN_QUERY=(commandline -b) atuin search --keymap-mode=$keymap_mode $argv -i 3>&1 1>&2 2>&3 | string collect)

      if test -n "$ATUIN_H"
          if string match --quiet '__atuin_accept__:*' "$ATUIN_H"
            set -l ATUIN_HIST (string replace "__atuin_accept__:" "" -- "$ATUIN_H" | string collect)
            commandline -r "$ATUIN_HIST"
            commandline -f repaint
            commandline -f execute
            return
          else
            commandline -r "$ATUIN_H"
          end
      end

      commandline -f repaint
  end

  function _atuin_bind_up
      # Fallback to fish's builtin up-or-search if we're in search or paging mode
      if commandline --search-mode; or commandline --paging-mode
          up-or-search
          return
      end

      # Only invoke atuin if we're on the top line of the command
      set -l lineno (commandline --line)

      switch $lineno
          case 1
              _atuin_search --shell-up-key-binding
          case '*'
              up-or-search
      end
  end

  bind \cr _atuin_search
  bind -k up _atuin_bind_up
  bind \eOA _atuin_bind_up
  bind \e\[A _atuin_bind_up
  if bind -M insert > /dev/null 2>&1
  bind -M insert \cr _atuin_search
  bind -M insert -k up _atuin_bind_up
  bind -M insert \eOA _atuin_bind_up
  bind -M insert \e\[A _atuin_bind_up
  end
#+end_src

** starship prompt
#+begin_src conf :tangle ./config.fish
  function fish_prompt
      switch "$fish_key_bindings"
          case fish_hybrid_key_bindings fish_vi_key_bindings
              set STARSHIP_KEYMAP "$fish_bind_mode"
          case '*'
              set STARSHIP_KEYMAP insert
      end
      set STARSHIP_CMD_PIPESTATUS $pipestatus
      set STARSHIP_CMD_STATUS $status
      # Account for changes in variable name between v2.7 and v3.0
      set STARSHIP_DURATION "$CMD_DURATION$cmd_duration"
      set STARSHIP_JOBS (count (jobs -p))
      if test "$TRANSIENT" = "1"
          set -g TRANSIENT 0
          # Clear from cursor to end of screen as `commandline -f repaint` does not do this
          # See https://github.com/fish-shell/fish-shell/issues/8418
          printf \e\[0J
          if type -q starship_transient_prompt_func
              starship_transient_prompt_func
          else
              printf "\e[1;32m‚ùØ\e[0m "
          end
      else
          starship prompt --terminal-width="$COLUMNS" --status=$STARSHIP_CMD_STATUS --pipestatus="$STARSHIP_CMD_PIPESTATUS" --keymap=$STARSHIP_KEYMAP --cmd-duration=$STARSHIP_DURATION --jobs=$STARSHIP_JOBS
      end
  end

  function fish_right_prompt
      switch "$fish_key_bindings"
          case fish_hybrid_key_bindings fish_vi_key_bindings
              set STARSHIP_KEYMAP "$fish_bind_mode"
          case '*'
              set STARSHIP_KEYMAP insert
      end
      set STARSHIP_CMD_PIPESTATUS $pipestatus
      set STARSHIP_CMD_STATUS $status
      # Account for changes in variable name between v2.7 and v3.0
      set STARSHIP_DURATION "$CMD_DURATION$cmd_duration"
      set STARSHIP_JOBS (count (jobs -p))
      if test "$RIGHT_TRANSIENT" = "1"
          set -g RIGHT_TRANSIENT 0
          if type -q starship_transient_rprompt_func
              starship_transient_rprompt_func
          else
              printf ""
          end
      else
          starship prompt --right --terminal-width="$COLUMNS" --status=$STARSHIP_CMD_STATUS --pipestatus="$STARSHIP_CMD_PIPESTATUS" --keymap=$STARSHIP_KEYMAP --cmd-duration=$STARSHIP_DURATION --jobs=$STARSHIP_JOBS
      end
  end

  # Disable virtualenv prompt, it breaks starship
  set -g VIRTUAL_ENV_DISABLE_PROMPT 1

  # Remove default mode prompt
  builtin functions -e fish_mode_prompt

  set -gx STARSHIP_SHELL "fish"

  # Transience related functions
  function reset-transient --on-event fish_postexec
      set -g TRANSIENT 0
      set -g RIGHT_TRANSIENT 0
  end

  function transient_execute
      if commandline --is-valid || test -z "$(commandline)" && not commandline --paging-mode
          set -g TRANSIENT 1
          set -g RIGHT_TRANSIENT 1
          commandline -f repaint
      end
      commandline -f execute
  end

  # --user is the default, but listed anyway to make it explicit.
  function enable_transience --description 'enable transient prompt keybindings'
      bind --user \r transient_execute
      bind --user -M insert \r transient_execute
  end

  # Erase the transient prompt related key bindings.
  # --user is the default, but listed anyway to make it explicit.
  # Erasing a user binding will revert to the preset.
  function disable_transience --description 'remove transient prompt keybindings'
      bind --user -e \r
      bind --user -M insert -e \r
  end


  # Set up the session key that will be used to store logs
  # We don't use `random [min] [max]` because it is unavailable in older versions of fish shell
  set -gx STARSHIP_SESSION_KEY (string sub -s1 -l16 (random)(random)(random)(random)(random)0000000000000000)
#+end_src

* automate sudo password
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./SUDO_ASKPASS
  echo 'asd'
#+end_src

* To destination
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./copy.sh
  cd "$(dirname -- "${0}")"
  mkdir -pv -- "${HOME}/.config/fish/"
  cp -vf -- './config.fish' "${HOME}/.config/fish/config.fish"
  cp -vf -- './SUDO_ASKPASS' "${HOME}/SUDO_ASKPASS"
#+end_src
