* Work space

** elisp stuff
#+begin_src emacs-lisp :results silent
  (save-buffer)
  (org-babel-tangle)
  (async-shell-command "
  git add './Dockerfile' ;
  git add './README.org' ;
  git add './docker.download_sam_checkpoints.sh' ;
  git add './host.docker_build.sh' ;
  git add './host.docker_run_interactive.sh' ;
  git add './host.image_names.sh' ;
  git add './important_functions.sh' ;
  " "log" "err")
#+end_src

* Basic preparation

** Basic configs

*** Docker container names
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.image_names.sh
  export IMAGE_NAME='debian-cuda'
  export CONTAINER_NAME="${IMAGE_NAME}_1"

  docker_build(){
      sudo docker image build \
          -t "${IMAGE_NAME}"  \
          .                   \
      ;
  }
#+end_src

*** Script to build the docker image
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.docker_build.sh
  cd "$('dirname' '--' "${0}")"
  . './host.image_names.sh'
#+end_src

** Main base image

*** For good rust support
#+begin_src conf :tangle ./Dockerfile
  FROM rust:latest
#+end_src

*** COMMENT Native cuda image
#+begin_src conf :tangle ./Dockerfile
  FROM nvidia/cuda:12.6.3-cudnn-devel-ubuntu24.04
#+end_src

** Basic configs
#+begin_src conf :tangle ./Dockerfile
  ENV HOME='/root'
  ENV DEBIAN_FRONTEND='noninteractive'
  ENV NVIDIA_DRIVER_CAPABILITIES='compute,utility,video'
  WORKDIR '/root'
#+end_src

** Important apt install stuff
#+begin_src conf :tangle ./Dockerfile
  RUN \
      --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
      --mount=target=/var/cache/apt,type=cache,sharing=locked \
      echo 'START apt-get stuff' \
      && apt-get -y update \
      && apt-get install -y \
          'aria2' \
          'bash' \
          'build-essential' \
          'ca-certificates' \
          'cmake' \
          'curl' \
          'ffmpeg' \
          'git' \
          'git-lfs' \
          'ipython3' \
          'libavcodec-dev' \
          'libavdevice-dev' \
          'libavfilter-dev' \
          'libavformat-dev' \
          'libavutil-dev' \
          'libc6' \
          'libc6-dev' \
          'libcairo2-dev' \
          'libffmpeg-nvenc-dev' \
          'libgirepository1.0-dev' \
          'libgl1' \
          'libglib2.0-0' \
          'libgstrtspserver-1.0-dev' \
          'libnuma-dev' \
          'libnuma1' \
          'libopencv-dev' \
          'libpostproc-dev' \
          'libsdl-kitchensink-dev' \
          'libsm6' \
          'libsndfile1-dev' \
          'libswresample-dev' \
          'libswscale-dev' \
          'libtool' \
          'libxext6' \
          'libxrender1' \
          'libxt-dev' \
          'make' \
          'nasm' \
          'neovim' \
          'ninja-build' \
          'pybind11-dev' \
          'python-gi-dev' \
          'python3-dev' \
          'python3-gst-1.0' \
          'python3-opencv' \
          'python3-pip' \
          'python3-pybind11' \
          'python3-setuptools' \
          'unzip' \
          'wget' \
          'yasm' \
      && echo 'DONE apt-get stuff' ;
#+end_src

** Installing cuda

*** COMMENT 12.4
#+begin_src conf :tangle ./Dockerfile
  RUN \
      --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
      --mount=target=/var/cache/apt,type=cache,sharing=locked \
      echo 'START nvidia cuda download' \
      && wget 'https://developer.download.nvidia.com/compute/cuda/repos/debian12/x86_64/cuda-keyring_1.1-1_all.deb' \
      && dpkg -i 'cuda-keyring_1.1-1_all.deb' \
      && apt-get 'update' \
      && apt-get '-y' 'install' \
          'cuda-toolkit-12-4' \
          'cudnn' \
          'cudnn-cuda-12' \
      && echo 'DONE nvidia cuda download' ;
#+end_src

*** 12.6
#+begin_src conf :tangle ./Dockerfile
  RUN \
      --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
      --mount=target=/var/cache/apt,type=cache,sharing=locked \
      echo 'START nvidia cuda download' \
      && wget 'https://developer.download.nvidia.com/compute/cuda/repos/debian12/x86_64/cuda-keyring_1.1-1_all.deb' \
      && dpkg -i 'cuda-keyring_1.1-1_all.deb' \
      && apt-get 'update' \
      && apt-get '-y' 'install' \
          'cuda-toolkit-12-6' \
          'cudnn' \
          'cudnn-cuda-12' \
      && echo 'DONE nvidia cuda download' ;
#+end_src

** Build the docker image
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.docker_build.sh
  docker_build
#+end_src

* Script to run the docker iamge

** Main script header
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.docker_run_interactive.sh
  tail -n +5 "${0}" | tr '\n' ' ' > "${0}.slave.sh"
  exec sh "${0}.slave.sh" "${1}" "${2}"
  exit
#+end_src

** Main script wrapper for preparing
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.docker_run_interactive.sh
  mkdir -pv -- "${2}" ;
  export INPUT="$(realpath -- "${1}")" ;
  export OUTPUT="$(realpath -- "${2}")" ;
  cd "$('dirname' '--' "${0}")" ;
  . './host.image_names.sh' ;
#+end_src

** Main script wrapper for docker run
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.docker_run_interactive.sh
  sudo docker run
  --tty
  --interactive
  --rm
  --gpus 'all,"capabilities=compute,utility,video"'
  --ipc host
  --ulimit memlock=-1
  --ulimit stack=67108864
  --shm-size 107374182400
#+end_src

** Main script wrapper for all mounts
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.docker_run_interactive.sh
  --mount 'type=tmpfs,destination=/data/TMPFS,tmpfs-size=137438953472'
  -v "${INPUT}:/data/input"
  -v "${OUTPUT}:/data/output"
#+end_src

** Main script for mounting the cache
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.docker_run_interactive.sh
  -v "CACHE:/root/.cache"
#+end_src

* Installing UV

** Install uv
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START uv download' \
      && curl -LsSf 'https://astral.sh/uv/install.sh' | sh \
      && cp -vf -- "${HOME}/.local/bin/uv" '/usr/local/bin/' \
      && echo 'DONE uv download' ;
#+end_src

** start venv
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START venv' \
      && uv venv \
          "${HOME}/venv" \
      && echo 'DONE venv' ;
#+end_src

* Basic updates
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START pip' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install -U \
          'ninja' \
          'packaging' \
          'pip' \
          'setuptools' \
          'wheel' \
      && echo 'DONE pip' ;
#+end_src

* Installing pytorch

** Main torch

*** For cuda 12.6
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START pytorch' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'torch' \
          'torchvision' \
          'torchaudio' \
          '--index-url' 'https://download.pytorch.org/whl/cu126' \
      && echo 'DONE pytorch' ;
#+end_src

*** COMMENT For cuda 12.4
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START pytorch' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'torch' \
          'torchaudio' \
          'torchvision' \
      && echo 'DONE pytorch' ;
#+end_src

** Extra torch libraries
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START pytorch quantization and tensorrt' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'torchao' \
          'torch-tensorrt' \
      && echo 'DONE pytorch quantization and tensorrt' ;
#+end_src

* Tensor manipulation
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START Tensor manipulation' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'einops' \
      && echo 'DONE Tensor manipulation' ;
#+end_src

* Image libraries
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START Extra misc libs' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'opencv_contrib_python' \
          'opencv_python' \
          'pillow' \
      && echo 'DONE Extra misc libs' ;
#+end_src

* flash attn

** COMMENT using uv
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START flash attn install using uv' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install --no-build-isolation \
          'flash-attn' \
      && echo 'DONE flash attn install using uv' ;
#+end_src

** using pip
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START flash attn install using pip' \
      && . "${HOME}/venv/bin/activate" \
      && pip3 install \
          'flash-attn' \
      && echo 'DONE flash attn install using pip' ;
#+end_src

* Install xformers

** For cuda 12.6
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START xformers install' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'xformers' \
          '--index-url' 'https://download.pytorch.org/whl/cu126' \
      && echo 'DONE xformers install' ;
#+end_src

* Quantization, optimization and offloading
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START Quantization, optimization and offloading' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'deepspeed' \
          'accelerate' \
          'lightning' \
          'optimum' \
          'optimum-quanto' \
          'prodigyopt' \
      && echo 'DONE Quantization, optimization and offloading' ;
#+end_src

* Core huggingface libs
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START Core huggingface libs' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'diffusers' \
          'huggingface-hub' \
          'peft' \
          'safetensors' \
          'transformers' \
      && echo 'DONE Core huggingface libs' ;
#+end_src

* Extra libraries

** 1
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START Extra libraries - 1' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'inotify-simple' \
          'optimum-quanto' \
          'packaging' \
          'sentencepiece' \
      && echo 'DONE Extra libraries - 1' ;
#+end_src

** 2
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START Extra libraries - 2' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'albumentations' \
          'datasets' \
          'evaluate' \
          'gekko' \
          'protobuf' \
          'pycairo' \
          'scikit-learn' \
          'ultralytics' \
      && echo 'DONE Extra libraries - 2' ;
#+end_src

** 3
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START Extra libraries - 3' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'dlib' \
          'matplotlib' \
          'tqdm' \
          'urllib3' \
      && echo 'DONE Extra libraries - 3' ;
#+end_src

* For video stuff
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START video stuff' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'decord' \
          'qwen-vl-utils[decord]==0.0.8' \
      && echo 'DONE video stuff' ;
#+end_src

* quantization

** auto GPTQ
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START GPTQ quantization libs' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install --no-deps  \
          'auto-gptq' \
      && echo 'DONE GPTQ quantization libs' ;
#+end_src

** auto AWQ
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START AWQ quantization libs' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install --no-deps --no-build-isolation \
          'autoawq-kernels' \
          'autoawq' \
      && echo 'DONE AWQ quantization libs' ;
#+end_src

* Install onnx
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START ONNX related' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'onnx' \
          'onnxconverter-common' \
          'onnxruntime' \
          'onnxruntime-gpu' \
          'onnxscript' \
          'openvino' \
      && echo 'DONE ONNX related' ;
#+end_src

* jupyter lab
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START jupyter lab install' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'ipywidgets' \
          'jupyterlab' \
          'jupyter' \
          'ipython' \
      && echo 'DONE jupyter lab install' ;
#+end_src

* polars
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START polars' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'polars' \
          'fastexcel' \
      && echo 'DONE polars' ;
#+end_src

* Pandas
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START Pandas' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'pandas' \
          'seaborn' \
      && echo 'DONE Pandas' ;
#+end_src

* Clone and install from source

** Transformers
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START transformers source install' \
      && cd "${HOME}" \
      && git clone --depth 1 'https://github.com/huggingface/transformers.git' \
      && cd transformers \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install -e . \
      && echo 'DONE transformers source install' ;
#+end_src

** pytorch video
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START pytorch video source install' \
      && cd "${HOME}" \
      && git clone --depth 1 'https://github.com/facebookresearch/pytorchvideo.git' \
      && cd 'pytorchvideo' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install -e . \
      && echo 'DONE pytorch video source install' ;
#+end_src

** Diffusers
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START diffusers install from source' \
      && cd "${HOME}" \
      && git clone --depth 1 'https://github.com/huggingface/diffusers.git' \
      && cd diffusers \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install -e . \
      && echo 'DONE diffusers install from source' ;
#+end_src

** TIMM
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START TIMM install from source' \
      && cd "${HOME}" \
      && git clone --depth 1 'https://github.com/huggingface/pytorch-image-models.git' \
      && cd pytorch-image-models \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install -e . \
      && echo 'DONE TIMM install from source' ;
#+end_src

** DOCTR
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START TIMM install from source' \
      && cd "${HOME}" \
      && git clone --depth 1 'https://github.com/mindee/doctr.git' \
      && cd doctr \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install -e . \
      && echo 'DONE TIMM install from source' ;
#+end_src

** QWEN 2.5 VL
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START QWEN 2.5 source' \
      && cd "${HOME}" \
      && git clone --depth 1 'https://github.com/QwenLM/Qwen2.5-VL.git' \
      && cd 'Qwen2.5-VL/qwen-vl-utils' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install -e . \
      && echo 'DONE QWEN 2.5 source' ;
#+end_src

** RTMLib
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START Installing RTMLib' \
      && cd "${HOME}" \
      && git clone --depth 1 'https://github.com/Tau-J/rtmlib.git' \
      && cd 'rtmlib' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install -e . \
      && echo 'DONE Installing RTMLib' ;
#+end_src

** SAM2

*** Extra libs
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START SAM extra deps' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'numpy' \
          'hydra-core' \
          'iopath' \
      && echo 'DONE SAM extra deps' ;
#+end_src

*** Main sam
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START' \
      && cd "${HOME}" \
      && git clone --depth 1 'https://github.com/facebookresearch/sam2.git' \
      && cd 'sam2' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install -e . \
      && echo 'DONE' ;
#+end_src

* Setup sym links for SHA512SUM
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START Linking SHA512SUM' \
      && ln -vfs -- \
          './.cache/SHA512SUM' \
          '/root/SHA512SUM' \
      && echo 'DONE Linking SHA512SUM' ;
#+end_src

* Important functions (script to source)

** Copy the script
#+begin_src conf :tangle ./Dockerfile
  COPY ./important_functions.sh '/root/important_functions.sh'
#+end_src

** The actual script

*** To download using aria2c
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  do_download() {
      test -e "${HOME}/TMP/${2}.aria2" \
          && aria2c -c -x16 -j16 "${1}" -o "${2}" -d "${HOME}/TMP/" ;

      test -e "${HOME}/TMP/${2}" \
          || aria2c -c -x16 -j16 "${1}" -o "${2}" -d "${HOME}/TMP/" ;
  }
#+end_src

*** Link the shasum to the destination
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  do_link(){
      mkdir -pv -- "$(dirname -- "${2}")"
      ln -vfs -- "${HOME}/SHA512SUM/${1}" "${2}"
  }
#+end_src

*** The main function to do the downloading
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  adown(){
      mkdir -pv -- "${HOME}/TMP" "${HOME}/SHA512SUM"

      test "${#}" '-ge' '4' && do_link "${3}" "${4}"

      test "${#}" '-ge' '3' && test -e "${HOME}/SHA512SUM/${3}" && return 0

      cd "${HOME}/TMP"

      do_download "${1}" "${2}"

      HASH="$(sha512sum "${2}" | cut -d ' ' -f1)"

      test "${#}" '-ge' '3' && test "${3}" '=' "${HASH}" && mv -vf -- "${2}" "${HOME}/SHA512SUM/${HASH}"

      test "${#}" '-ge' '4' && do_link "${3}" "${4}"
  }
#+end_src

*** Download git repos

**** Download the repo from huggingface
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  get_repo_hf(){
      DIR_BASE="${HOME}/HUGGINGFACE"
      DIR_REPO="$('echo' "${1}" | 'sed' 's@^https://huggingface.co/@@g ; s@/tree/main$@@g')"
      DIR_FULL="${DIR_BASE}/${DIR_REPO}"
      URL="$('echo' "${1}" | 'sed' 's@/tree/main$@@g')"

      mkdir '-pv' '--' "$('dirname' '--' "${DIR_FULL}")"
      cd "$('dirname' '--' "${DIR_FULL}")"
      git clone "${URL}"
      cd "${DIR_FULL}"
      git pull
      git submodule update --recursive --init
  }
#+end_src

**** Download the repo from github
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  get_repo(){
      DIR_REPO="${HOME}/GITHUB/$('echo' "${1}" | 'sed' 's/^git@github.com://g ; s@^https://github.com/@@g ; s@.git$@@g' )"
      DIR_BASE="$('dirname' '--' "${DIR_REPO}")"

      mkdir -pv -- "${DIR_BASE}"
      cd "${DIR_BASE}"
      git clone "${1}"
      cd "${DIR_REPO}"

      if test "${#}" '-ge' '2'
      then
          git switch "${2}"
      else
          git switch main
      fi

      git pull
      git submodule update --recursive --init

      if test "${#}" '-ge' '3'
      then
          git checkout "${3}"
      fi
  }
#+end_src

*** Get oh my zsh for convenience
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  get_ohmyzsh(){
      get_repo 'https://github.com/ohmyzsh/ohmyzsh.git'
      test -d "${HOME}/.oh-my-zsh" && rm -rf "${HOME}/.oh-my-zsh"
      test -L "${HOME}/.oh-my-zsh" || ln -vfs "./GITHUB/ohmyzsh/ohmyzsh" "${HOME}/.oh-my-zsh"
      cp "${HOME}/.oh-my-zsh/templates/zshrc.zsh-template" "${HOME}/.zshrc"
  }
#+end_src

* Setup zsh

** Install zsh
#+begin_src conf :tangle ./Dockerfile
  RUN \
      --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
      --mount=target=/var/cache/apt,type=cache,sharing=locked \
      echo 'START apt-get zsh stuff' \
      && apt-get -y update \
      && apt-get install -y \
          'zsh' \
      && echo 'DONE apt-get zsh stuff' ;
#+end_src

** Get oh my zsh
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START set up oh my zsh' \
      && . "${HOME}/important_functions.sh" \
      && get_ohmyzsh \
      && echo 'DONE set up oh my zsh' ;
#+end_src

* Download SAM checkpoints inside the container

** Copy the scriot into the container
#+begin_src conf :tangle ./Dockerfile
  COPY ./docker.download_sam_checkpoints.sh '/root/docker.download_sam_checkpoints.sh'
#+end_src

** The actual script

*** Create the directory
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./docker.download_sam_checkpoints.sh
  mkdir -pv -- "${HOME}/.cache/SHA512SUM"
#+end_src

*** Get the defined functions
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./docker.download_sam_checkpoints.sh
  . "${HOME}/important_functions.sh"
#+end_src

*** Download the actual checkpoints

**** Tiny
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./docker.download_sam_checkpoints.sh
  adown \
      'https://dl.fbaipublicfiles.com/segment_anything_2/092824/sam2.1_hiera_tiny.pt' \
      'sam2.1_hiera_tiny.pt' \
      'df6fe66086c6e127f9932be2d0bc0a0c57f087c0e142427bea5ef7b71626e131e2755984df0bcd76b119e9dc0cc9dc33a8842e31ce445b3658ce77abe8789e2b'
      "${HOME}/sam2/checkpoints/sam2.1_hiera_tiny.pt" \
  ;
#+end_src

**** Small
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./docker.download_sam_checkpoints.sh
  adown \
      'https://dl.fbaipublicfiles.com/segment_anything_2/092824/sam2.1_hiera_small.pt' \
      'sam2.1_hiera_small.pt' \
      'f6a1ab87b096fd6753ed2b7cfbb13695ad3ceb7a3dc3ea433f23571c0db2369ee372d27da3be9bce39c53ffc84a7e9a30c6879e5b1b418898d831442039264c6' \
      "${HOME}/sam2/checkpoints/sam2.1_hiera_small.pt" \
  ;
#+end_src

**** Base
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./docker.download_sam_checkpoints.sh
  adown \
      'https://dl.fbaipublicfiles.com/segment_anything_2/092824/sam2.1_hiera_base_plus.pt' \
      'sam2.1_hiera_base_plus.pt' \
      '0c4f89b91f1f951b95246f9544f32d93d370aaf10c30344d47df0cfa3316a819cffd0042ab462244198ae8261d56fa4cc93bf916b4c9f4450d651ac3faa9a7cd' \
      "${HOME}/sam2/checkpoints/sam2.1_hiera_base_plus.pt" \
  ;
#+end_src

**** Large
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./docker.download_sam_checkpoints.sh
  adown \
      'https://dl.fbaipublicfiles.com/segment_anything_2/092824/sam2.1_hiera_large.pt' \
      'sam2.1_hiera_large.pt' \
      '2672dacbbd40f9d8e0fffb80696316054e1a32f32a8241c89492e532f0607f1dc2bf0913f6688cfeb7521b02bb16c90b3ed4e90f53568c1f60f0c610f21ef21f' \
      "${HOME}/sam2/checkpoints/sam2.1_hiera_large.pt" \
  ;
#+end_src

* Main script wrapper for docker image name and command

** Image name
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.docker_run_interactive.sh
  "${IMAGE_NAME}"
#+end_src

** COMMENT run bash
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.docker_run_interactive.sh
  '/bin/bash' ;
#+end_src

** run bash
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.docker_run_interactive.sh
  'zsh' ;
#+end_src

** COMMENT start jupyter lab
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.docker_run_interactive.sh
  '/root/docker.start_jupyter_lab.sh' ;
#+end_src
