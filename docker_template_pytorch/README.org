* Work space

** elisp stuff
#+begin_src emacs-lisp
  (save-buffer)
  (org-babel-tangle)
  (async-shell-command "./work.sh" "log" "error")
#+end_src

#+RESULTS:
: #<window 290 on log>

** shell stuff
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./work.sh
  rm -vf -- 'README.org~' '.#README.org' './work.sh'
  git status
#+end_src

* Main code

** Basic configs

*** Docker container names
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.image_names.sh
  IMAGE_NAME='jupyter_torch'
  CONTAINER_NAME="${IMAGE_NAME}_1"

  docker_build(){
      sudo docker image build \
          -t "${IMAGE_NAME}"  \
          .                   \
      ;
  }
#+end_src

*** Script to build the docker image
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.docker_build.sh
  cd "$('dirname' '--' "${0}")"
  . './host.image_names.sh'
#+end_src

*** Main base image
#+begin_src conf :tangle ./Dockerfile
  # FROM pytorch/pytorch:2.3.1-cuda12.1-cudnn8-devel
  # FROM pytorch/pytorch:2.3.0-cuda12.1-cudnn8-devel
  # FROM pytorch/pytorch:2.3.1-cuda11.8-cudnn8-devel
  FROM nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04
#+end_src

*** Basic configs
#+begin_src conf :tangle ./Dockerfile
  ENV HOME='/root'
  ENV DEBIAN_FRONTEND='noninteractive'
  WORKDIR '/root'
#+end_src

** Important apt install stuff
#+begin_src conf :tangle ./Dockerfile
  RUN \
      --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
      --mount=target=/var/cache/apt,type=cache,sharing=locked \
      echo 'Starting apt-get stuff' \
      && apt-get -y update \
      && apt-get install -y \
          aria2 \
          bash \
          build-essential \
          ca-certificates \
          curl \
          git \
          git-lfs \
          libgl1 \
          libglib2.0-0 \
          libsm6 \
          libsndfile1-dev \
          libxext6 \
          libxrender1 \
          neovim \
          python3-dev \
          python3-pip \
      && echo 'Done apt-get stuff' ;
#+end_src

** Install uv
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'Starting uv download' \
      && curl -LsSf 'https://astral.sh/uv/install.sh' | sh \
      && cp -vf -- "${HOME}/.local/bin/uv" '/usr/local/bin/' \
      && echo 'Done uv download' ;
#+end_src

** start venv
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'starting' \
      && uv venv "${HOME}/venv" \
      && echo 'done' ;
#+end_src

** Install pypi stuff

*** Basic stuff
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'starting' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install -U \
          pip \
          setuptools \
          wheel \
      && echo 'done' ;
#+end_src

*** Torch stuff
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'starting' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          torch \
          torchao \
          torchaudio \
          torchvision \
      && echo 'done' ;
#+end_src

*** Extra libraries
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'starting' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          accelerate \
          deepspeed \
          diffusers \
          einops \
          huggingface-hub \
          inotify-simple \
          ninja \
          optimum-quanto \
          packaging \
          peft \
          prodigyopt \
          sentencepiece \
          transformers \
      && echo 'done' ;
#+end_src

*** quantization
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'starting' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install --no-deps \
          autoawq-kernels \
          auto-gptq \
          autoawq \
          optimum  \
      && echo 'done' ;
#+end_src

*** jupyter lab
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'starting' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          jupyterlab \
      && echo 'done' ;
#+end_src

*** COMMENT flash attn

**** COMMENT using uv
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'starting' \
      && . /root/venv/bin/activate \
      && uv pip install --no-build-isolation \
          flash-attn \
      && echo 'done' ;
#+end_src

**** using pip
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'starting' \
      && . /root/venv/bin/activate \
      && pip3 install \
          flash-attn \
      && echo 'done' ;
#+end_src

** Clone and install latest transformers
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'starting' \
      && cd /root \
      && git clone --depth 1 'https://github.com/huggingface/transformers.git' \
      && cd transformers \
      && . /root/venv/bin/activate \
      && uv pip install -e . \
      && echo 'done' \
  ;
#+end_src

** Clone and install latest diffusers
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'starting' \
      && cd /root \
      && git clone --depth 1 'https://github.com/huggingface/diffusers.git' \
      && cd diffusers \
      && . /root/venv/bin/activate \
      && uv pip install -e . \
      && echo 'done' \
  ;
#+end_src

** Expose the jupyterlab port
#+begin_src conf :tangle ./Dockerfile
  EXPOSE 8888/tcp
#+end_src

** Start the server inside the container

*** Copy the script
#+begin_src conf :tangle ./Dockerfile
  COPY ./docker.start_jupyter_lab.sh /root/docker.start_jupyter_lab.sh
#+end_src

*** Main shell script
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./docker.start_jupyter_lab.sh
  cd "${HOME}"
  . "${HOME}/venv/bin/activate"
  exec 'jupyter' 'lab' '--allow-root' '--ip=0.0.0.0'
#+end_src

** Build the docker image
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.docker_build.sh
  docker_build
#+end_src

** Script to run the docker iamge
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.docker_run_interactive.sh
  mkdir -pv -- "${2}"

  INPUT="$(realpath -- "${1}")"
  OUTPUT="$(realpath -- "${2}")"

  cd "$('dirname' '--' "${0}")"

  . './host.image_names.sh'

  sudo docker run                                                          \
      --tty                                                                \
      --interactive                                                        \
      --rm                                                                 \
      --gpus all                                                           \
      --ipc host                                                           \
      --ulimit memlock=-1                                                  \
      --ulimit stack=67108864                                              \
      --mount 'type=tmpfs,destination=/data/TMPFS,tmpfs-size=137438953472' \
      -p '0.0.0.0:8888:8888/tcp'                                           \
      -v "CACHE:/root/.cache"                                              \
      -v "${INPUT}:/data/input"                                            \
      -v "${OUTPUT}:/data/output"                                          \
      "${IMAGE_NAME}"                                                      \
      '/bin/bash'                                                          \
  ;
#+end_src
