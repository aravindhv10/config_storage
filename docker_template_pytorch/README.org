* Scripts to manage

** Important functions

*** Primitive functions

**** touch files
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./.git.sh
  P_TOUCH () {
      test -e "./${1}" || touch "./${1}"
  }
#+end_src

**** add files to GIT
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./.git.sh
  P_GITADD () {
      git add "./${1}"
  }
#+end_src

**** delete files
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./.git.sh
  P_CLEAN () {
      rm -vf -- "./${1}"
  }
#+end_src

**** Read the file
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./.git.sh
  P_READ () {
      cat "./${1}"
  }
#+end_src

*** Compound functions

**** add files to GIT
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./.git.sh
  GITADD () {
      P_TOUCH "${1}"
      P_GITADD "${1}"
  }
#+end_src

*** PYTHON

**** PRIMITIVE

***** Process the python file
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./.git.sh
  P_PROCESS () {
      expand | grep -v '^ *$' | grep -v '^#!/usr/bin/python3$' | ruff format - 
  }
#+end_src

**** COMPOUND

***** Read and process the file
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./.git.sh
  READ_AND_PROCESS_FILE () {
      P_TOUCH "${1}"
      P_READ "${1}" | P_PROCESS
  }
#+end_src

***** Process all python files
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./.git.sh
  READ_ALL_PYTHON(){
      echo '#!/usr/bin/env python3'
      READ_AND_PROCESS_FILE "${1}.config.py"
      READ_AND_PROCESS_FILE "${1}.import.py" | sort | uniq
      READ_AND_PROCESS_FILE "${1}.function.py"
      READ_AND_PROCESS_FILE "${1}.class.py"
      READ_AND_PROCESS_FILE "${1}.execute.py"
  }

  CLEAN_ALL_PYTHON(){
      P_CLEAN "${1}.config.py"
      P_CLEAN "${1}.import.py"
      P_CLEAN "${1}.function.py"
      P_CLEAN "${1}.class.py"
      P_CLEAN "${1}.execute.py"
  }

  PREPARE_PYTHON_FILE() {
      READ_ALL_PYTHON "${1}" | P_PROCESS > "./${1}.py"
      CLEAN_ALL_PYTHON "${1}"
      chmod +x "./${1}.py"
      GITADD "${1}.py"
  }
#+end_src

*** Final wrappers

**** For git add
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./.git.sh
  GITADD_MAIN () {
      GITADD 'Dockerfile'
      GITADD 'README.org'
      GITADD 'default_config.yaml'
      GITADD 'docker.download_sam_checkpoints.sh'
      GITADD 'docker.start_jupyter_lab.sh'
      GITADD 'host.docker_build.sh'
      GITADD 'host.docker_run_interactive.sh'
      GITADD 'host.image_names.sh'
      GITADD 'important_functions.sh'
  }
#+end_src

**** For clean
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./.git.sh
  CLEAN_MAIN () {
      P_CLEAN '.git.sh'
      P_CLEAN 'README.org~'
  }
#+end_src

**** python stuff
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./.git.sh
  UNIFY_MAIN () {
      PREPARE_PYTHON_FILE 'main'
  }
#+end_src

**** Call both
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./.git.sh
  MAIN () {
      GITADD_MAIN
      CLEAN_MAIN
      UNIFY_MAIN
  }
#+end_src

** Call the main function
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./.git.sh
  MAIN
#+end_src

* Host scripts

** image env

*** Important envs
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.image_names.sh
  IMAGE_NAME='pytorch_big'
  CONTAINER_NAME="${IMAGE_NAME}_1"
#+end_src

*** Function to build
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.image_names.sh
  docker_build(){
      sudo -A docker image build \
          -t "${IMAGE_NAME}"  \
          .                   \
      ;
  }
#+end_src

*** Function to run
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.image_names.sh
  docker_run () {
      mkdir -pv -- './input' './output'
      INPUT="$(realpath ./input)"
      OUTPUT="$(realpath ./output)"
      sudo -A docker run \
          --tty \
          --interactive \
          --rm \
          --gpus 'all,"capabilities=compute,utility,video"' \
          --ipc host \
          --ulimit memlock=-1 \
          --ulimit stack=67108864 \
          --shm-size 107374182400 \
          --mount 'type=tmpfs,destination=/data/TMPFS,tmpfs-size=137438953472' \
          -v "${INPUT}:/data/input" \
          -v "${OUTPUT}:/data/output" \
          -v "CACHE:/root/.cache" \
          -p "0.0.0.0:${LISTEN_PORT}:${LISTEN_PORT}/tcp" \
          "${IMAGE_NAME}" "${IMAGE_CMD}" \
      ;
  }
#+end_src

** Script to build the docker image
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.docker_build.sh
  cd "$('dirname' '--' "${0}")"
  . './host.image_names.sh'
  docker_build
#+end_src

* Basic image config

** Main base image
#+begin_src conf :tangle ./Dockerfile
  FROM nvidia/cuda:12.9.1-cudnn-devel-ubuntu24.04
#+end_src

** Basic configs
#+begin_src conf :tangle ./Dockerfile
  ENV HOME='/root'
  ENV DEBIAN_FRONTEND='noninteractive'
  ENV NVIDIA_DRIVER_CAPABILITIES='compute,utility,video'
  WORKDIR '/root'
#+end_src

* zsh setup

** Important apt install stuff
#+begin_src conf :tangle ./Dockerfile
  RUN \
      --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
      --mount=target=/var/cache/apt,type=cache,sharing=locked \
      echo 'START apt-get stuff' \
      && apt-get -y update \
      && apt-get install -y \
          'aria2' \
          'git' \
          'wget' \
          'zsh' \
      && echo 'DONE apt-get stuff' ;
#+end_src

** Get ohmyzsh
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START ohmyzsh' \
      && git clone 'https://github.com/ohmyzsh/ohmyzsh.git' \
      && ln -vfs "${HOME}/ohmyzsh" "${HOME}/.oh-my-zsh" \
      && cp "${HOME}/.oh-my-zsh/templates/zshrc.zsh-template" "${HOME}/.zshrc" \
      && echo 'DONE ohmyzsh' ;
#+end_src

** Get starship
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START ohmyzsh' \
      && aria2c -c 'https://starship.rs/install.sh' \
      && chmod +x './install.sh' \
      && './install.sh' '-y' \
      && echo 'eval "$(starship init zsh)"' >> "${HOME}/.zshrc" \
      && echo 'DONE ohmyzsh' ;
#+end_src

** More convenient tools
#+begin_src conf :tangle ./Dockerfile
  RUN \
      --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
      --mount=target=/var/cache/apt,type=cache,sharing=locked \
      echo 'START apt-get stuff' \
      && apt-get -y update \
      && apt-get install -y \
          'bat' \
          'fzf' \
          'lsd' \
      && echo 'alias ls=lsd' >> "${HOME}/.zshrc" \
      && echo 'alias cat=batcat' >> "${HOME}/.zshrc" \
      && echo 'DONE apt-get stuff' ;
#+end_src

* Main command to run in the container
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.image_names.sh
  IMAGE_CMD='zsh'
#+end_src

* Important apt install stuff
#+begin_src conf :tangle ./Dockerfile
  RUN \
      --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
      --mount=target=/var/cache/apt,type=cache,sharing=locked \
      echo 'START apt-get stuff' \
      && apt-get -y update \
      && apt-get install -y \
          'aria2' \
          'build-essential' \
          'cmake' \
          'curl' \
          'ffmpeg' \
          'git' \
          'git-lfs' \
          'ipython3' \
          'libcairo2-dev' \
          'lsd' \
          'make' \
          'neovim' \
          'ninja-build' \
          'pkg-config' \
          'python3-cairo-dev' \
          'python3-dev' \
          'python3-opencv' \
          'python3-pip' \
          'python3-setuptools' \
          'unzip' \
          'wget' \
          'zsh' \
      && echo 'DONE apt-get stuff' ;
#+end_src

* Script to run the docker iamge
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.docker_run_interactive.sh
  cd "$('dirname' -- "${0}")"
  . './host.image_names.sh'
  docker_run
#+end_src

* Installing UV

** Install uv
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START uv download' \
      && curl -LsSf 'https://astral.sh/uv/install.sh' | sh \
      && cp -vf -- "${HOME}/.local/bin/uv" '/usr/local/bin/' \
      && echo 'DONE uv download' ;
#+end_src

** start venv
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START venv' \
      && uv venv "${HOME}/venv" \
      && echo 'DONE venv' ;
#+end_src

* Basic updates
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START pip' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install -U \
          'ipython' \
          'ninja' \
          'packaging' \
          'pip' \
          'setuptools' \
          'wheel' \
      && echo 'DONE pip' ;
#+end_src

* Installing pytorch

** Main torch
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START pytorch' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          '--index-url' 'https://download.pytorch.org/whl/cu129' \
              'torch' \
              'torchvision' \
      && echo 'DONE pytorch' ;
#+end_src

** Extra torch libraries, Tensor manipulation & Image libraries
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START pytorch quantization and tensorrt' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'einops' \
          'opencv_contrib_python' \
          'opencv_python' \
          'pillow' \
          'torchao' \
      && echo 'DONE pytorch quantization and tensorrt' ;
#+end_src

* Install xformers
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START xformers install' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          '--index-url' 'https://download.pytorch.org/whl/cu129' \
              'xformers' \
      && echo 'DONE xformers install' ;
#+end_src

* Quantization, optimization and offloading
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START Quantization, optimization and offloading' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
          'accelerate' \
          'albumentations' \
          'datasets' \
          'deepspeed' \
          'diffusers' \
          'evaluate' \
          'fastapi[standard]' \
          'fastexcel' \
          'huggingface-hub' \
          'inotify-simple' \
          'ipython' \
          'ipywidgets' \
          'jupyter' \
          'jupyterlab' \
          'lightning[extra]' \
          'matplotlib' \
          'openvino' \
          'optimum' \
          'optimum-quanto' \
          'packaging' \
          'prodigyopt' \
          'protobuf' \
          'requests' \
          'safetensors' \
          'scikit-learn' \
          'sentencepiece' \
          'torch_dct' \
          'torchmetrics' \
          'tqdm' \
          'transformers' \
          'ultralytics' \
          'urllib3' \
          'wandb' \
      && echo 'DONE Quantization, optimization and offloading' ;
#+end_src

* Important functions (script to source)

** Copy the script
#+begin_src conf :tangle ./Dockerfile
  COPY ./important_functions.sh '/root/important_functions.sh'
#+end_src

** The actual script

*** To download using aria2c
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  do_download() {
      test -e "${HOME}/TMP/${2}.aria2" \
          && aria2c -c -x16 -j16 "${1}" -o "${2}" -d "${HOME}/TMP/" ;

      test -e "${HOME}/TMP/${2}" \
          || aria2c -c -x16 -j16 "${1}" -o "${2}" -d "${HOME}/TMP/" ;
  }
#+end_src

*** Link the shasum to the destination
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  do_link(){
      mkdir -pv -- "$(dirname -- "${2}")"
      ln -vfs -- "${HOME}/SHA512SUM/${1}" "${2}"
  }
#+end_src

*** The main function to do the downloading
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  adown(){
      mkdir -pv -- "${HOME}/TMP" "${HOME}/SHA512SUM"

      test "${#}" '-ge' '4' && do_link "${3}" "${4}"

      test "${#}" '-ge' '3' && test -e "${HOME}/SHA512SUM/${3}" && return 0

      cd "${HOME}/TMP"

      do_download "${1}" "${2}"

      HASH="$(sha512sum "${2}" | cut -d ' ' -f1)"

      test "${#}" '-ge' '3' && test "${3}" '=' "${HASH}" && mv -vf -- "${2}" "${HOME}/SHA512SUM/${HASH}"

      test "${#}" '-ge' '4' && do_link "${3}" "${4}"
  }
#+end_src

*** Download git repos

**** Download the repo from huggingface
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  get_repo_hf(){
      DIR_BASE="${HOME}/HUGGINGFACE"
      DIR_REPO="$('echo' "${1}" | 'sed' 's@^https://huggingface.co/@@g ; s@/tree/main$@@g')"
      DIR_FULL="${DIR_BASE}/${DIR_REPO}"
      URL="$('echo' "${1}" | 'sed' 's@/tree/main$@@g')"

      mkdir '-pv' '--' "$('dirname' '--' "${DIR_FULL}")"
      cd "$('dirname' '--' "${DIR_FULL}")"
      git clone --depth 1 "${URL}"
      cd "${DIR_FULL}"
      git pull
      git submodule update --recursive --init
  }
#+end_src

**** Download the repo from github
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  get_repo(){
      DIR_REPO="${HOME}/GITHUB/$('echo' "${1}" | 'sed' 's/^git@github.com://g ; s@^https://github.com/@@g ; s@.git$@@g' )"
      DIR_BASE="$('dirname' '--' "${DIR_REPO}")"

      mkdir -pv -- "${DIR_BASE}"
      cd "${DIR_BASE}"
      git clone "${1}"
      cd "${DIR_REPO}"

      if test "${#}" '-ge' '2'
      then
          git switch "${2}"
      else
          git switch main
      fi

      git pull
      git submodule update --recursive --init

      if test "${#}" '-ge' '3'
      then
          git checkout "${3}"
      fi
  }
#+end_src

**** install python code
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  install_python_source(){
      . "${HOME}/venv/bin/activate"
      get_repo "${1}"
      uv pip install -e .
  }
#+end_src

*** Get oh my zsh for convenience
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  get_ohmyzsh(){
      get_repo 'https://github.com/ohmyzsh/ohmyzsh.git'
      test -d "${HOME}/.oh-my-zsh" && rm -rf "${HOME}/.oh-my-zsh"
      test -L "${HOME}/.oh-my-zsh" || ln -vfs "./GITHUB/ohmyzsh/ohmyzsh" "${HOME}/.oh-my-zsh"
      cp "${HOME}/.oh-my-zsh/templates/zshrc.zsh-template" "${HOME}/.zshrc"
  }
#+end_src

* Clone and install from source

** Transformers
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START transformers source install' \
      && . "${HOME}/important_functions.sh" \
      && install_python_source 'https://github.com/huggingface/transformers.git' \
      && echo 'DONE transformers source install' ;
#+end_src

** pytorch video
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START pytorch video source install' \
      && . "${HOME}/important_functions.sh" \
      && install_python_source 'https://github.com/facebookresearch/pytorchvideo.git' \
      && echo 'DONE pytorch video source install' ;
#+end_src

** Diffusers
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START diffusers install from source' \
      && . "${HOME}/important_functions.sh" \
      && install_python_source 'https://github.com/huggingface/diffusers.git' \
      && echo 'DONE diffusers install from source' ;
#+end_src

** TIMM
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START TIMM install from source' \
      && . "${HOME}/important_functions.sh" \
      && install_python_source 'https://github.com/huggingface/pytorch-image-models.git' \
      && echo 'DONE TIMM install from source' ;
#+end_src

** DOCTR
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START doctr install from source' \
      && . "${HOME}/important_functions.sh" \
      && install_python_source 'https://github.com/mindee/doctr.git' \
      && echo 'DONE doctr install from source' ;
#+end_src

* Huggingface accelerate config

** Copy the file into the image
#+begin_src conf :tangle ./Dockerfile
  COPY './default_config.yaml' '/root/default_config.yaml'
#+end_src

** Actual file which seems to be working with qwen 2 VL 72B
#+begin_src conf :tangle ./default_config.yaml
  compute_environment: LOCAL_MACHINE
  debug: false
  deepspeed_config:
    gradient_accumulation_steps: 1
    offload_optimizer_device: cpu
    offload_param_device: cpu
    zero3_init_flag: true
    zero3_save_16bit_model: true
    zero_stage: 3
  distributed_type: DEEPSPEED
  downcast_bf16: 'no'
  dynamo_config:
    dynamo_backend: INDUCTOR
  enable_cpu_affinity: false
  machine_rank: 0
  main_training_function: main
  mixed_precision: bf16
  num_machines: 1
  num_processes: 1
  rdzv_backend: static
  same_network: true
  tpu_env: []
  tpu_use_cluster: false
  tpu_use_sudo: false
  use_cpu: false
#+end_src

* Image for jupyter

** Expose the jupyterlab port

*** Inside the container
#+begin_src conf :tangle ./Dockerfile
  EXPOSE 8888/tcp
#+end_src

*** Network port for running the image
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./host.image_names.sh
  LISTEN_PORT='8888'
#+end_src

** Script to start jupyterlab server

*** Copy the script
#+begin_src conf :tangle ./Dockerfile
  COPY './docker.start_jupyter_lab.sh' '/root/docker.start_jupyter_lab.sh'
#+end_src

*** Main shell script for starting jupyterlab
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./docker.start_jupyter_lab.sh
  cd '/data/output'
  . "${HOME}/venv/bin/activate"
  'jupyter' 'notebook' 'password'
  exec 'jupyter' 'lab' '--allow-root' '--ip=*'
#+end_src

* onnxscript and runtime
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START onnxstuff' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
              'onnxruntime-gpu' \
              'onnxscript' \
      && echo 'DONE onnxstuff' ;
#+end_src

* Flash attn
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START flash attn' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
              '--no-build-isolation' \
                  'flash-attn' \
      && echo 'DONE flash attn' ;
#+end_src

* Huggingface hub
Some package is buggy and needs this for now
#+begin_src conf :tangle ./Dockerfile
  RUN \
      echo 'START Hub' \
      && . "${HOME}/venv/bin/activate" \
      && uv pip install \
              'huggingface-hub==1.0.0.rc5' \
      && echo 'DONE Hub' ;
#+end_src

* Prepare venv in dockerfile
#+begin_src conf :tangle ./Dockerfile
  ENV PATH='/root/venv/bin:/root/.local/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  ENV VIRTUAL_ENV='/root/venv'
  ENV VIRTUAL_ENV_PROMPT='venv'
#+end_src

* Work space
#+begin_src emacs-lisp :results silent
  (save-buffer)
  (org-babel-tangle)
  (async-shell-command "
      './.git.sh'
  " "log" "err")
#+end_src
