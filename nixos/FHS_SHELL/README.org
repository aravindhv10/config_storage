* COMMENT WORK SPACE

** ELISP
#+begin_src emacs-lisp :results silent
  (save-buffer)
  (org-babel-tangle)
  (async-shell-command "
          find ./ -type f | grep '\.nix$' | sed 's@^@alejandra \"@g ; s@$@\"@g' | sh
          rm -vf -- './README.org~' './#shell.nix#' './shell.nix~'
          git add './README.org'
          git add './shell.nix'
      " "log" "err")
#+end_src

* Main shell code

** Function inputs
#+begin_src nix :tangle ./shell.nix
  {pkgs ? import <nixpkgs> {}} :
#+end_src

** Start convenience definitions

*** begin
#+begin_src nix :tangle ./shell.nix
  let
#+end_src

**** Package list

***** begin
#+begin_src nix :tangle ./shell.nix
  mylist = with pkgs; [
#+end_src

***** main

rocmPackages.meta.rocm-all
****** generic packages
#+begin_src nix :tangle ./shell.nix
  bc
  bison
  ffmpeg
  ffmpeg.dev
  flex
  gnumake
  libelf
  openssl
  openssl.dev
  python313Full
  udev
  zsh
  zstd
#+end_src

****** python packages

******* begin
#+begin_src nix :tangle ./shell.nix
  (pkgs.python313.withPackages (ps: with ps; [
#+end_src

******* main
#+begin_src nix :tangle ./shell.nix
  albumentations
  einops
  inotify-simple
  ipython
  multiprocess
  numpy
  opencv-python
  pillow
  requests
  safetensors
  torch
  torchvision
  transformers
#+end_src

******* end
#+begin_src nix :tangle ./shell.nix
  ]))
#+end_src

***** end
#+begin_src nix :tangle ./shell.nix
  ] ;
#+end_src

*** end
#+begin_src nix :tangle ./shell.nix
  in
#+end_src

** Function outputs

*** Header
#+begin_src nix :tangle ./shell.nix
  (pkgs.buildFHSEnv {
#+end_src

*** name
#+begin_src nix :tangle ./shell.nix
  name = "simple-x11-env";
#+end_src

*** Defining package list common
#+begin_src nix :tangle ./shell.nix
  targetPkgs = pkgs: mylist;
#+end_src

*** Defining package list common
#+begin_src nix :tangle ./shell.nix
  multiPkgs = pkgs: mylist;
#+end_src

*** Main shell command
#+begin_src nix :tangle ./shell.nix
  runScript = "fish";
#+end_src

*** Trailer
#+begin_src nix :tangle ./shell.nix
  })
#+end_src

** Done
#+begin_src nix :tangle ./shell.nix
  .env
#+end_src
