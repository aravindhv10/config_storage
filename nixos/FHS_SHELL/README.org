* COMMENT WORK SPACE

** ELISP
#+begin_src emacs-lisp :results silent
  (save-buffer)
  (org-babel-tangle)
  (async-shell-command "
          find ./ -type f | grep '\.nix$' | sed 's@^@alejandra \"@g ; s@$@\"@g' | sh
          rm -vf -- './README.org~' './#shell.nix#' './shell.nix~'
          git add './README.org'
          git add './shell.nix'
      " "log" "err")
#+end_src

* Main shell code

** Function inputs
#+begin_src nix :tangle ./shell.nix
{pkgs ? import <nixpkgs> {}}:
#+end_src

** Package lists
#+begin_src nix :tangle ./shell.nix
  let
      mylist = [
          pkgs.alsa-lib
          pkgs.bc
          pkgs.bison
          pkgs.flex
          pkgs.gnumake
          pkgs.libelf
          pkgs.python312Full
          pkgs.rocmPackages.meta.rocm-all
          pkgs.udev
          pkgs.xorg.libX11
          pkgs.xorg.libXcursor
          pkgs.xorg.libXrandr
          pkgs.zsh
          pkgs.zstd
      ] ;
  in
#+end_src

** Function outputs

*** Header
#+begin_src nix :tangle ./shell.nix
(pkgs.buildFHSEnv {
#+end_src

*** name
#+begin_src nix :tangle ./shell.nix
  name = "simple-x11-env";
#+end_src


*** Defining package list common
#+begin_src nix :tangle ./shell.nix
  targetPkgs = pkgs: mylist;
#+end_src

*** COMMENT Defining package list

**** BEGIN
#+begin_src nix :tangle ./shell.nix
  targetPkgs = pkgs:
    (with pkgs; [
#+end_src

**** LIST
#+begin_src nix :tangle ./shell.nix
  alsa-lib
  bc
  bison
  flex
  gnumake
  libelf
  python312Full
  udev
  zsh
#+end_src

**** END
#+begin_src nix :tangle ./shell.nix
    ])
#+end_src

*** COMMENT EXTRA
#+begin_src nix :tangle ./shell.nix
    ++ (with pkgs.xorg; [
      libX11
      libXcursor
      libXrandr
    ]);
#+end_src

*** Defining package list common
#+begin_src nix :tangle ./shell.nix
  multiPkgs = pkgs: mylist;
#+end_src

*** COMMENT AGAIN

**** BEGIN
#+begin_src nix :tangle ./shell.nix
  multiPkgs = pkgs: (with pkgs; [
#+end_src

**** LIST
#+begin_src nix :tangle ./shell.nix
  alsa-lib
  bc
  bison
  flex
  gnumake
  libelf
  python312Full
  udev
  zsh
#+end_src

**** END
#+begin_src nix :tangle ./shell.nix
  ]);
#+end_src

*** Main shell command
#+begin_src nix :tangle ./shell.nix
  runScript = "zsh";
#+end_src

*** Trailer
#+begin_src nix :tangle ./shell.nix
})
#+end_src

** Done
#+begin_src nix :tangle ./shell.nix
.env
#+end_src
