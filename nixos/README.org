* WORK SPACE
#+begin_src emacs-lisp :results silent
  (save-buffer)
  (org-babel-tangle)
#+end_src

* hardware-configuration

** inputs used
#+begin_src nix :tangle ./hardware-configuration.nix
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }: 
#+end_src

** Start the main function
#+begin_src nix :tangle ./hardware-configuration.nix
  {
#+end_src

*** Import important stuff
#+begin_src nix :tangle ./hardware-configuration.nix
  imports = [(modulesPath + "/installer/scan/not-detected.nix")];
#+end_src

*** List of fiesystems

**** Main root filesystem
#+begin_src nix :tangle ./hardware-configuration.nix
  fileSystems."/" = {
    device = "/dev/disk/by-partlabel/linux";
    fsType = "btrfs";
    options = [ "subvol=@" "compress=zstd:3" ];
  };
#+end_src

**** EFI boot partition
#+begin_src nix :tangle ./hardware-configuration.nix
  fileSystems."/boot" = {
    device = "/dev/disk/by-partlabel/efi";
    fsType = "vfat";
    options = [ "fmask=0077" "dmask=0077" ];
  };
#+end_src

*** Swap stuff
#+begin_src nix :tangle ./hardware-configuration.nix
  swapDevices = [{device = "/dev/disk/by-partlabel/swap0";}];
#+end_src

** Done with hardware configuration
#+begin_src nix :tangle ./hardware-configuration.nix
  }
#+end_src

* Main config

Edit this configuration file to define what should be installed on
your system.  Help is available in the configuration.nix(5) man page
and in the NixOS manual (accessible by running ‘nixos-help’).

** Header
#+begin_src nix :tangle ./configuration.nix
  { config, lib, pkgs, modulesPath, ... }:
#+end_src

** Additional definitions

*** BEGIN
#+begin_src nix :tangle ./configuration.nix
  let
#+end_src

*** DEFINE

**** importing unstable
#+begin_src nix :tangle ./configuration.nix
  unstable = import <nixos-unstable> {} ;
#+end_src

**** Import my changes
#+begin_src nix :tangle ./configuration.nix
  custom = import /home/asd/GITHUB/NixOS/nixpkgs {} ;
#+end_src

*** END
#+begin_src nix :tangle ./configuration.nix
  in
#+end_src

** Main part of the config

*** BEGIN
#+begin_src nix :tangle ./configuration.nix
  {
#+end_src

*** DEFINE

**** Import hardware configuration
#+begin_src nix :tangle ./configuration.nix
  imports = [./hardware-configuration.nix];
#+end_src

**** Bootloader.

***** BEGIN
#+begin_src nix :tangle ./configuration.nix
  boot.loader = {
#+end_src


***** MAIN

****** COMMENT systemd boot
#+begin_src nix :tangle ./configuration.nix
  systemd-boot.enable = true;
#+end_src

****** EFI Related
#+begin_src nix :tangle ./configuration.nix
  efi = {
    canTouchEfiVariables = true;
    efiSysMountPoint = "/boot/efi"; # ← use the same mount point here.
  };
#+end_src

****** GRUB Related

******* BEGIN
#+begin_src nix :tangle ./configuration.nix
  grub = {
#+end_src

******* MAIN

******** EFI support
#+begin_src nix :tangle ./configuration.nix
  efiSupport = true;
#+end_src

******** Device
#+begin_src nix :tangle ./configuration.nix
  device = "/dev/nvme0n1";
#+end_src

******** COMMENT efiInstallAsRemovable
#+begin_src nix :tangle ./configuration.nix
  efiInstallAsRemovable = true; # in case canTouchEfiVariables doesn't work for your system
#+end_src

******** Extra entries

********* BEGIN
#+begin_src nix :tangle ./configuration.nix
      extraEntries = ''
#+end_src

********* MAIN

********** Debian
#+begin_src nix :tangle ./configuration.nix
  menuentry "debian" {
      linux /k root=/dev/disk/by-partlabel/linux rootflags=subvolid=904 dolvm zswap.enabled=1 zswap.max_pool_percent=80 zswap.zpool=zsmalloc
      initrd /i
  }
#+end_src

********** Nixos with debian kernel
#+begin_src nix :tangle ./configuration.nix
  menuentry "nixos_debian_kernel" {
      linux /k root=/dev/disk/by-partlabel/linux rootflags=subvol=@ init=/nix/store/rd4d341n7gs3pvagdrc5bghldz9ny4p8-nixos-system-nixos-24.11.715519.ebe2788eafd5/init dolvm zswap.enabled=1 zswap.max_pool_percent=80 zswap.zpool=zsmalloc
      initrd /i
  }
#+end_src

********* END
#+begin_src nix :tangle ./configuration.nix
  '' ;
#+end_src

******* END
#+begin_src nix :tangle ./configuration.nix
  };
#+end_src

***** END
#+begin_src nix :tangle ./configuration.nix
   };
#+end_src

**** Networking
Enables DHCP on each ethernet and wireless interface. In case of scripted networking
(the default) this is the recommended approach. When using systemd-networkd it's
still possible to use this option, but it's recommended to use it in conjunction
with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
#+begin_src nix :tangle ./configuration.nix
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp1s0.useDHCP = lib.mkDefault true;
#+end_src

**** Host platform and firmware
#+begin_src nix :tangle ./configuration.nix
  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
#+end_src

**** Initrd and kernel modules
#+begin_src nix :tangle ./configuration.nix
  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "ahci" "uas" "sd_mod" ];
  boot.initrd.kernelModules = [];
  boot.kernelModules = [ "kvm-amd" "amdgpu" ];
  boot.extraModulePackages = [];
#+end_src

**** Env vars
#+begin_src nix :tangle ./configuration.nix
  environment.variables = {ROC_ENABLE_PRE_VEGA = "1";};
#+end_src

**** GPU drivers related
#+begin_src nix :tangle ./configuration.nix
  hardware.opengl.extraPackages = [pkgs.amdvlk pkgs.rocmPackages.clr.icd];
#+end_src

***** For 32 bit applications 
#+begin_src nix :tangle ./configuration.nix
  hardware.graphics.enable32Bit = true;
  hardware.opengl.extraPackages32 = [pkgs.driversi686Linux.amdvlk];
#+end_src

**** Kernel Package

***** COMMENT 6.12
#+begin_src nix :tangle ./configuration.nix
    boot.kernelPackages = pkgs.linuxPackages_6_12; 
#+end_src

***** COMMENT 6.6
#+begin_src nix :tangle ./configuration.nix
    boot.kernelPackages = pkgs.linuxKernel.packages.linux_6_6;
#+end_src

***** Xanmod

****** Latest
#+begin_src nix :tangle ./configuration.nix
    boot.kernelPackages = pkgs.linuxKernel.packages.linux_xanmod_latest;
#+end_src

****** COMMENT Stable
#+begin_src nix :tangle ./configuration.nix
    boot.kernelPackages = pkgs.linuxKernel.packages.linux_xanmod_stable;
#+end_src

***** COMMENT Custom build
#+begin_src nix :tangle ./configuration.nix
  boot.kernelPackages =
  let
      linux_sgx_pkg = { fetchurl, buildLinux, ... } @ args:
          buildLinux (
              args // rec {
                  version = "6.12";
                  modDirVersion = version;
                  src = /home/asd/GITHUB/torvalds/linux-6.12.tar;
                  kernelPatches = [];
                  extraConfig = ''
                  '';
                  extraMeta.branch = "6.12";
              } // (args.argsOverride or {})
          );
      linux_sgx = pkgs.callPackage linux_sgx_pkg{};
  in 
      pkgs.recurseIntoAttrs (pkgs.linuxPackagesFor linux_sgx);
#+end_src

**** Kernel command line
#+begin_src nix :tangle ./configuration.nix
    boot.kernelParams = [ "zswap.enabled=1" "zswap.max_pool_percent=80" ];
#+end_src

**** Mount tmpfs on /tmp
#+begin_src nix :tangle ./configuration.nix
    fileSystems."/tmp" = {device = "none"; fsType = "tmpfs";};
#+end_src

**** Rest
#+begin_src nix :tangle ./configuration.nix
    networking.hostName = "nixos"; # Define your hostname.
    # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

    # Configure network proxy if necessary
    # networking.proxy.default = "http://user:password@proxy:port/";
    # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

    # Enable networking
    networking.networkmanager.enable = true;

    # Set your time zone.
    time.timeZone = "Asia/Kolkata";

    # Select internationalisation properties.
    i18n.defaultLocale = "en_IN";

    i18n.extraLocaleSettings = {
      LC_ADDRESS = "en_IN";
      LC_IDENTIFICATION = "en_IN";
      LC_MEASUREMENT = "en_IN";
      LC_MONETARY = "en_IN";
      LC_NAME = "en_IN";
      LC_NUMERIC = "en_IN";
      LC_PAPER = "en_IN";
      LC_TELEPHONE = "en_IN";
      LC_TIME = "en_IN";
    };

    # Enable the X11 windowing system.
    # You can disable this if you're only using the Wayland session.
    services.xserver.enable = true;
    services.xserver.videoDrivers = [ "amdgpu" ];
    systemd.tmpfiles.rules = [
      "L+    /opt/rocm/hip   -    -    -     -    ${pkgs.rocmPackages.clr}"
    ];


    # Enable the KDE Plasma Desktop Environment.
    services.displayManager.sddm.enable = true;
    services.displayManager.sddm.wayland.enable = true;
    services.displayManager.sddm.settings.General.DisplayServer = "wayland";

    # services.xserver.displayManager.gdm.enable = true;

    services.desktopManager.plasma6.enable = true;
    # services.xserver.desktopManager.gnome.enable = true;


    # Configure keymap in X11
    services.xserver.xkb = {
      layout = "us";
      variant = "";
    };


    services.xserver.desktopManager.gnome.enable = true;

    environment.gnome.excludePackages = (with pkgs; [
      atomix # puzzle game
      cheese # webcam tool
      epiphany # web browser
      evince # document viewer
      geary # email reader
      gedit # text editor
      gnome-characters
      gnome-music
      gnome-photos
      gnome-terminal
      gnome-tour
      hitori # sudoku game
      iagno # go game
      tali # poker game
      totem # video player
      seahorse
    ]);


    # Enable CUPS to print documents.
    services.printing.enable = true;
    documentation.enable = true;
    documentation.man.enable = true;
    documentation.dev.enable = true;

    # Enable sound with pipewire.
    # hardware.pulseaudio.enable = false;
    security.rtkit.enable = true;
    services.pipewire = {
      enable = true;
      alsa.enable = true;
      alsa.support32Bit = true;
      pulse.enable = true;
      # If you want to use JACK applications, uncomment this
      #jack.enable = true;

      # use the example session manager (no others are packaged yet so this is enabled by default,
      # no need to redefine it in your config for now)
      #media-session.enable = true;
    };

    # services.pipewire.extraConfig.pipewire."91-null-sinks" = {
      # "context.objects" = [
        # {
          # # A default dummy driver. This handles nodes marked with the "node.always-driver"
          # # properyty when no other driver is currently active. JACK clients need this.
          # factory = "spa-node-factory";
          # args = {
            # "factory.name" = "support.node.driver";
            # "node.name" = "Dummy-Driver";
            # "priority.driver" = 8000;
          # };
        # }
        # {
          # factory = "adapter";
          # args = {
            # "factory.name" = "support.null-audio-sink";
            # "node.name" = "Microphone-Proxy";
            # "node.description" = "Microphone";
            # "media.class" = "Audio/Source/Virtual";
            # "audio.position" = "MONO";
          # };
        # }
        # {
          # factory = "adapter";
          # args = {
            # "factory.name" = "support.null-audio-sink";
            # "node.name" = "Main-Output-Proxy";
            # "node.description" = "Main Output";
            # "media.class" = "Audio/Sink";
            # "audio.position" = "FL,FR";
          # };
        # }
      # ];
    # };

    # services.pipewire.extraConfig.pipewire-pulse."92-low-latency" = {
      # "context.properties" = [
        # {
          # name = "libpipewire-module-protocol-pulse";
          # args = { };
        # }
      # ];
      # "pulse.properties" = {
        # "pulse.min.req" = "32/48000";
        # "pulse.default.req" = "32/48000";
        # "pulse.max.req" = "32/48000";
        # "pulse.min.quantum" = "32/48000";
        # "pulse.max.quantum" = "32/48000";
      # };
      # "stream.properties" = {
        # "node.latency" = "32/48000";
        # "resample.quality" = 1;
      # };
    # };

    # services.pipewire.socketActivation = false; 
    # Start WirePlumber (with PipeWire) at boot.
    # systemd.user.services.wireplumber.wantedBy = [ "default.target" ];


    # Enable touchpad support (enabled default in most desktopManager).
    # services.xserver.libinput.enable = true;

    # Define a user account. Don't forget to set a password with ‘passwd’.
    users.users.asd = {
      isNormalUser = true;
      description = "asd";
      extraGroups = [ "networkmanager" "wheel" "audio" ];
      packages = with pkgs; [
        kdePackages.kate
      #  thunderbird
      ];
    };
    # users.users.asd.linger = true; # keep user services running

    programs.fish.enable = true;
    users.defaultUserShell = pkgs.fish;

    # Install firefox.
    programs.firefox.enable = true;

    # Allow unfree packages
    nixpkgs.config.allowUnfree = true;



    virtualisation.containers.enable = true;
    virtualisation = {
      podman = {
        enable = true;

        # Create a `docker` alias for podman, to use it as a drop-in replacement
        dockerCompat = true;

        # Required for containers under podman-compose to be able to talk to each other.
        defaultNetwork.settings.dns_enabled = true;
      };
    };

    # List packages installed in system profile. To search, run:
    # $ nix search wget





    environment.systemPackages = with pkgs; [
      catppuccin-kde
      acpi
      alacritty
      alsa-utils
      appstream
      aria2
      atuin
      bat
      bottom
      brave
      byobu
      clinfo
      cmake
      curl
      debootstrap
      difftastic
      dive # look into docker image layers
      dnsmasq
      docker-compose # start group of containers for dev
      dust
      emacs30
      fd
      file
      unstable.fish
      nix-ld
      # fishPlugins.done
      # fishPlugins.forgit
      # fishPlugins.fzf-fish
      # fishPlugins.grc
      # fishPlugins.hydro
      unstable.flatpak
      foot
      fuse3
      fzf
      gcc
      gcc14Stdenv
      gdk-pixbuf
      gdm
      git
      glib
      gpgme
      grc
      grub2
      grub2_efi
      gsettings-desktop-schemas
      helix
      htop
      json-glib
      libarchive
      libcap
      libgcc
      librsvg
      libseccomp
      libxml2
      lsd
      lxc
      man-pages
      man-pages-posix
      meson
      miniserve
      mpv
      neovim
      networkmanager-openconnect
      nix-index
      nushell
      openconnect
      openssl
      oxygen
      parted
      pavucontrol
      pciutils
      pkg-config
      podman
      podman-compose # start group of containers for dev
      podman-tui # status of containers in the terminal
      python3
      python3Full
      qbittorrent-enhanced
      rclone
      ripgrep
      ruff
      rustc
      cargo
      (callPackage /root/debMirror.nix {})
      skim
      squashfsTools
      starship
      tmux
      unzip
      uv
      vim
      wayland
      wayland-protocols
      wezterm
      wget
      xorg.libXau
      yazi
      zip
      zoxide
      zstd
     ];

    # Some programs need SUID wrappers, can be configured further or are
    # started in user sessions.
    # programs.mtr.enable = true;
    # programs.gnupg.agent = {
    #   enable = true;
    #   enableSSHSupport = true;
    # };

    # List services that you want to enable:

    # Enable the OpenSSH daemon.
    services.openssh.enable = true;
    services.flatpak.enable = true;

    
  services.dnsmasq = {
      enable = true;

      alwaysKeepRunning = true;
      resolveLocalQueries = true;

      settings = {
        server = [ "192.168.1.254" "4.2.2.2" "8.8.8.8" "8.8.8.4" "8.8.4.4" "76.76.2.0" "76.76.10.0" "9.9.9.9" "149.112.112.112" "208.67.222.222" "208.67.220.220" "1.1.1.1" "1.0.0.1" "94.140.14.14" "94.140.15.15" "185.228.168.9" "185.228.169.9" "76.76.19.19" "76.223.122.150" ] ;
        local-service = true; # Accept DNS queries only from hosts whose address is on a local subnet
        log-queries = true; # Log results of all DNS queries
        bogus-priv = true; # Don't forward requests for the local address ranges (192.168.x.x etc) to upstream nameservers
        domain-needed = true; # Don't forward requests without dots or domain parts to upstream nameservers

        dnssec = true; # Enable DNSSEC
        # DNSSEC trust anchor. Source: https://data.iana.org/root-anchors/root-anchors.xml
        trust-anchor = ".,20326,8,2,E06D44B80B8F1D39A95C0B0D7C65D08458E880409BBC683457104237C7F8EC8D";
      };
    };

   
    # Open ports in the firewall.
    # networking.firewall.allowedTCPPorts = [ ... ];
    # networking.firewall.allowedUDPPorts = [ ... ];
    # Or disable the firewall altogether.
    # networking.firewall.enable = false;

    # This value determines the NixOS release from which the default
    # settings for stateful data, like file locations and database versions
    # on your system were taken. It‘s perfectly fine and recommended to leave
    # this value at the release version of the first install of this system.
    # Before changing this value read the documentation for this option
    # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
    system.stateVersion = "24.11"; # Did you read the comment?

#+end_src

*** END
#+begin_src nix :tangle ./configuration.nix
  }
#+end_src

* Sample

** hardware-configuration
#+begin_src nix :tangle ./hardware-configuration.nix
#+end_src

** configuration
#+begin_src nix :tangle ./configuration.nix
#+end_src

