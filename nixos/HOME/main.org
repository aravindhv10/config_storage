* work space
#+begin_src emacs-lisp :results silent
  (save-buffer)
  (org-babel-tangle)
  (async-shell-command "
          './setup.sh' ;
          git add './HOME,.bashrc'
          git add './HOME,.config,fish,config.fish'
          git add './HOME,.config,foot,foot.ini'
          git add './HOME,important_functions.sh'
          git add './HOME,.wezterm.lua'
          git add './main.org'
          git add './setup.sh'
          git add './SUDO_ASKPASS.c'
          rm -vf -- './main.org~' ;
      " "log" "err")
#+end_src

* Main copy script

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./setup.sh
  C(){
      mkdir -pv -- "$('dirname' -- "${2}")"
      cp -vf -- "${1}" "${2}"
  }
#+end_src

* WEZTERM

** Copy the config file
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./setup.sh
  C './HOME,.wezterm.lua' "${HOME}/.wezterm.lua"
#+end_src

** The actuaal wezterm config
#+begin_src lua :tangle ./HOME,.wezterm.lua
-- Pull in the wezterm API
local wezterm = require 'wezterm'

-- This will hold the configuration.
local config = wezterm.config_builder()

config.default_prog = { 'fish', '-l' }
config.use_fancy_tab_bar = false

config.color_scheme = 'Modus-Vivendi'

config.keys = {
  {
    key = '/',
    mods = 'CTRL|ALT',
    action = wezterm.action.ShowLauncher,
  },
  {
    key = 'LeftArrow',
    mods = 'CTRL|ALT',
    action = wezterm.action.SplitPane {
      direction = 'Left',
      command = { args = { '/usr/local/bin/fish' } },
      size = { Percent = 50 },
    },
  },
  {
    key = 'RightArrow',
    mods = 'CTRL|ALT',
    action = wezterm.action.SplitPane {
      direction = 'Right',
      command = { args = { '/usr/local/bin/fish' } },
      size = { Percent = 50 },
    },
  },
  {
    key = 'DownArrow',
    mods = 'CTRL|ALT',
    action = wezterm.action.SplitPane {
      direction = 'Down',
      command = { args = { '/usr/local/bin/fish' } },
      size = { Percent = 50 },
    },
  },
  {
    key = 'UpArrow',
    mods = 'CTRL|ALT',
    action = wezterm.action.SplitPane {
      direction = 'Up',
      command = { args = { '/usr/local/bin/fish' } },
      size = { Percent = 50 },
    },
  },
}

config.launch_menu = {
  {
    label = 'fish',
    args = { 'fish', '-l' },
  },
  {
    label = 'Bash',
    args = { 'bash', '-l' },
  },
  {
    label = 'tmux',
    args = { 'byobu-tmux' },
  },
  {
    label = 'top',
    args = { 'btm', '-b', '--process_command' },
  },
  {
    label = 'alsamixer',
    args = { 'alsamixer' },
  },
}

return config
#+end_src

* FOOT

** Copy the config file
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./setup.sh
  C './HOME,.config,foot,foot.ini' "${HOME}/.config/foot/foot.ini"
#+end_src

** Main config file
#+begin_src conf :tangle ./HOME,.config,foot,foot.ini
  # -*- conf -*-

  # shell=$SHELL (if set, otherwise user's default shell from /etc/passwd)
  # term=foot (or xterm-256color if built with -Dterminfo=disabled)
  # login-shell=no

  # app-id=foot # globally set wayland app-id. Default values are "foot" and "footclient" for desktop and server mode
  # title=foot
  # locked-title=no

  font=monospace:size=16
  # font-bold=<bold variant of regular font>
  # font-italic=<italic variant of regular font>
  # font-bold-italic=<bold+italic variant of regular font>
  # font-size-adjustment=0.5
  # line-height=<font metrics>
  # letter-spacing=0
  # horizontal-letter-offset=0
  # vertical-letter-offset=0
  # underline-offset=<font metrics>
  # underline-thickness=<font underline thickness>
  # strikeout-thickness=<font strikeout thickness>
  # box-drawings-uses-font-glyphs=no
  # dpi-aware=no

  # initial-window-size-pixels=700x500  # Or,
  # initial-window-size-chars=<COLSxROWS>
  # initial-window-mode=windowed
  # pad=0x0                             # optionally append 'center'
  # resize-by-cells=yes
  # resize-keep-grid=yes
  # resize-delay-ms=100

  # bold-text-in-bright=no
  # word-delimiters=,│`|:"'()[]{}<>
  # selection-target=primary
  # workers=<number of logical CPUs>
  # utmp-helper=/usr/lib/utempter/utempter  # When utmp backend is ‘libutempter’ (Linux)
  # utmp-helper=/usr/libexec/ulog-helper    # When utmp backend is ‘ulog’ (FreeBSD)

  [environment]
  # name=value

  [bell]
  # urgent=no
  # notify=no
  # visual=no
  # command=
  # command-focused=no

  [desktop-notifications]
  # command=notify-send --wait --app-name ${app-id} --icon ${app-id} --category ${category} --urgency ${urgency} --expire-time ${expire-time} --hint STRING:image-path:${icon} --hint BOOLEAN:suppress-sound:${muted} --hint STRING:sound-name:${sound-name} --replace-id ${replace-id} ${action-argument} --print-id -- ${title} ${body}
  # command-action-argument=--action ${action-name}=${action-label}
  # close=""
  # inhibit-when-focused=yes


  [scrollback]
  # lines=1000
  # multiplier=3.0
  # indicator-position=relative
  # indicator-format=""

  [url]
  # launch=xdg-open ${url}
  # label-letters=sadfjklewcmpgh
  # osc8-underline=url-mode
  # protocols=http, https, ftp, ftps, file, gemini, gopher
  # uri-characters=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.,~:;/?#@!$&%*+="'()[]

  [cursor]
  # style=block
  # color=<inverse foreground/background>
  # blink=no
  # blink-rate=500
  # beam-thickness=1.5
  # underline-thickness=<font underline thickness>

  [mouse]
  # hide-when-typing=no
  # alternate-scroll-mode=yes

  [touch]
  # long-press-delay=400

  [colors]
  # alpha=1.0
  # background=242424
  # foreground=ffffff
  # flash=7f7f00
  # flash-alpha=0.5

  ## Normal/regular colors (color palette 0-7)
  # regular0=242424  # black
  # regular1=f62b5a  # red
  # regular2=47b413  # green
  # regular3=e3c401  # yellow
  # regular4=24acd4  # blue
  # regular5=f2affd  # magenta
  # regular6=13c299  # cyan
  # regular7=e6e6e6  # white

  ## Bright colors (color palette 8-15)
  # bright0=616161   # bright black
  # bright1=ff4d51   # bright red
  # bright2=35d450   # bright green
  # bright3=e9e836   # bright yellow
  # bright4=5dc5f8   # bright blue
  # bright5=feabf2   # bright magenta
  # bright6=24dfc4   # bright cyan
  # bright7=ffffff   # bright white

  ## dimmed colors (see foot.ini(5) man page)
  # dim0=<not set>
  # ...
  # dim7=<not-set>

  ## The remaining 256-color palette
  # 16 = <256-color palette #16>
  # ...
  # 255 = <256-color palette #255>

  ## Sixel colors
  # sixel0 =  000000
  # sixel1 =  3333cc
  # sixel2 =  cc2121
  # sixel3 =  33cc33
  # sixel4 =  cc33cc
  # sixel5 =  33cccc
  # sixel6 =  cccc33
  # sixel7 =  878787
  # sixel8 =  424242
  # sixel9 =  545499
  # sixel10 = 994242
  # sixel11 = 549954
  # sixel12 = 995499
  # sixel13 = 549999
  # sixel14 = 999954
  # sixel15 = cccccc

  ## Misc colors
  # selection-foreground=<inverse foreground/background>
  # selection-background=<inverse foreground/background>
  # jump-labels=<regular0> <regular3>          # black-on-yellow
  # scrollback-indicator=<regular0> <bright4>  # black-on-bright-blue
  # search-box-no-match=<regular0> <regular1>  # black-on-red
  # search-box-match=<regular0> <regular3>     # black-on-yellow
  # urls=<regular3>

  [csd]
  # preferred=server
  # size=26
  # font=<primary font>
  # color=<foreground color>
  # hide-when-maximized=no
  # double-click-to-maximize=yes
  # border-width=0
  # border-color=<csd.color>
  # button-width=26
  # button-color=<background color>
  # button-minimize-color=<regular4>
  # button-maximize-color=<regular2>
  # button-close-color=<regular1>

  [key-bindings]
  # scrollback-up-page=Shift+Page_Up
  # scrollback-up-half-page=none
  # scrollback-up-line=none
  # scrollback-down-page=Shift+Page_Down
  # scrollback-down-half-page=none
  # scrollback-down-line=none
  # scrollback-home=none
  # scrollback-end=none
  # clipboard-copy=Control+Shift+c XF86Copy
  # clipboard-paste=Control+Shift+v XF86Paste
  # primary-paste=Shift+Insert
  # search-start=Control+Shift+r
  # font-increase=Control+plus Control+equal Control+KP_Add
  # font-decrease=Control+minus Control+KP_Subtract
  # font-reset=Control+0 Control+KP_0
  # spawn-terminal=Control+Shift+n
  # minimize=none
  # maximize=none
  # fullscreen=none
  # pipe-visible=[sh -c "xurls | fuzzel | xargs -r firefox"] none
  # pipe-scrollback=[sh -c "xurls | fuzzel | xargs -r firefox"] none
  # pipe-selected=[xargs -r firefox] none
  # pipe-command-output=[wl-copy] none # Copy last command's output to the clipboard
  # show-urls-launch=Control+Shift+o
  # show-urls-copy=none
  # show-urls-persistent=none
  # prompt-prev=Control+Shift+z
  # prompt-next=Control+Shift+x
  # unicode-input=Control+Shift+u
  # noop=none

  [search-bindings]
  # cancel=Control+g Control+c Escape
  # commit=Return
  # find-prev=Control+r
  # find-next=Control+s
  # cursor-left=Left Control+b
  # cursor-left-word=Control+Left Mod1+b
  # cursor-right=Right Control+f
  # cursor-right-word=Control+Right Mod1+f
  # cursor-home=Home Control+a
  # cursor-end=End Control+e
  # delete-prev=BackSpace
  # delete-prev-word=Mod1+BackSpace Control+BackSpace
  # delete-next=Delete
  # delete-next-word=Mod1+d Control+Delete
  # extend-char=Shift+Right
  # extend-to-word-boundary=Control+w Control+Shift+Right
  # extend-to-next-whitespace=Control+Shift+w
  # extend-line-down=Shift+Down
  # extend-backward-char=Shift+Left
  # extend-backward-to-word-boundary=Control+Shift+Left
  # extend-backward-to-next-whitespace=none
  # extend-line-up=Shift+Up
  # clipboard-paste=Control+v Control+Shift+v Control+y XF86Paste
  # primary-paste=Shift+Insert
  # unicode-input=none
  # quit=none
  # scrollback-up-page=Shift+Page_Up
  # scrollback-up-half-page=none
  # scrollback-up-line=none
  # scrollback-down-page=Shift+Page_Down
  # scrollback-down-half-page=none
  # scrollback-down-line=none
  # scrollback-home=none
  # scrollback-end=none

  [url-bindings]
  # cancel=Control+g Control+c Control+d Escape
  # toggle-url-visible=t

  [text-bindings]
  # \x03=Mod4+c  # Map Super+c -> Ctrl+c

  [mouse-bindings]
  # scrollback-up-mouse=BTN_WHEEL_BACK
  # scrollback-down-mouse=BTN_WHEEL_FORWARD
  # font-increase=Control+BTN_WHEEL_BACK
  # font-decrease=Control+BTN_WHEEL_FORWARD
  # selection-override-modifiers=Shift
  # primary-paste=BTN_MIDDLE
  # select-begin=BTN_LEFT
  # select-begin-block=Control+BTN_LEFT
  # select-extend=BTN_RIGHT
  # select-extend-character-wise=Control+BTN_RIGHT
  # select-word=BTN_LEFT-2
  # select-word-whitespace=Control+BTN_LEFT-2
  # select-quote = BTN_LEFT-3
  # select-row=BTN_LEFT-4

  # vim: ft=dosini
#+end_src

* Important shell functions

** Copy the config file
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./setup.sh
  C './HOME,important_functions.sh' "${HOME}/important_functions.sh"
#+end_src

** Main script
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./HOME,important_functions.sh
  do_download() {
      test -e "${HOME}/TMP/${2}.aria2" \
          && aria2c -c -x16 -j16 "${1}" -o "${2}" -d "${HOME}/TMP/" ;

      test -e "${HOME}/TMP/${2}" \
          || aria2c -c -x16 -j16 "${1}" -o "${2}" -d "${HOME}/TMP/" ;
  }

  do_link(){
      mkdir -pv -- "$(dirname -- "${2}")"
      ln -vfs -- "${HOME}/SHA512SUM/${1}" "${2}"
  }

  adown(){
      mkdir -pv -- "${HOME}/TMP" "${HOME}/SHA512SUM"

      test "${#}" '-ge' '4' && do_link "${3}" "${4}"

      test "${#}" '-ge' '3' && test -e "${HOME}/SHA512SUM/${3}" && return 0

      cd "${HOME}/TMP"

      do_download "${1}" "${2}"

      HASH="$(sha512sum "${2}" | cut -d ' ' -f1)"

      test "${#}" '-ge' '3' && test "${3}" '=' "${HASH}" && mv -vf -- "${2}" "${HOME}/SHA512SUM/${HASH}"

      test "${#}" '-ge' '4' && do_link "${3}" "${4}"
  }

  get_repo_hf(){
      DIR_BASE="${HOME}/HUGGINGFACE"
      DIR_REPO="$('echo' "${1}" | 'sed' 's@^https://huggingface.co/@@g ; s@/tree/main$@@g')"
      DIR_FULL="${DIR_BASE}/${DIR_REPO}"
      URL="$('echo' "${1}" | 'sed' 's@/tree/main$@@g')"

      mkdir '-pv' '--' "$('dirname' '--' "${DIR_FULL}")"
      cd "$('dirname' '--' "${DIR_FULL}")"
      git clone "${URL}"
      cd "${DIR_FULL}"
      git pull
      git submodule update --recursive --init
  }

  get_repo(){
      DIR_REPO="${HOME}/GITHUB/$('echo' "${1}" | 'sed' 's/^git@github.com://g ; s@^https://github.com/@@g ; s@.git$@@g' )"
      DIR_BASE="$('dirname' '--' "${DIR_REPO}")"

      mkdir -pv -- "${DIR_BASE}"
      cd "${DIR_BASE}"
      git clone "${1}"
      cd "${DIR_REPO}"

      if test "${#}" '-ge' '2'
      then
          git switch "${2}"
      else
          git switch main
      fi

      git pull
      git submodule update --recursive --init

      if test "${#}" '-ge' '3'
      then
          git checkout "${3}"
      fi
  }

  get_ohmyzsh(){
      get_repo 'https://github.com/ohmyzsh/ohmyzsh.git'
      test -d "${HOME}/.oh-my-zsh" && rm -rf "${HOME}/.oh-my-zsh"
      test -L "${HOME}/.oh-my-zsh" || ln -vfs "./GITHUB/ohmyzsh/ohmyzsh" "${HOME}/.oh-my-zsh"
      cp "${HOME}/.oh-my-zsh/templates/zshrc.zsh-template" "${HOME}/.zshrc"

      get_repo 'https://github.com/spaceship-prompt/spaceship-prompt.git'
      ln -vfs "${HOME}/GITHUB/spaceship-prompt/spaceship-prompt" "${HOME}/.oh-my-zsh/custom/themes/"
      ln -vfs "${HOME}/.oh-my-zsh/custom/themes/spaceship-prompt/spaceship.zsh-theme" "${HOME}/.oh-my-zsh/custom/themes/spaceship.zsh-theme"
      echo 'ZSH_THEME="spaceship"'  >> "${HOME}/.zshrc"
      echo 'bindkey -v' >> "${HOME}/.zshrc"
  }

  install_rust(){
      . "${HOME}/.cargo/env"
      which cargo || curl --proto '=https' --tlsv1.2 -sSf 'https://sh.rustup.rs' | sh
      . "${HOME}/.cargo/env"
      cargo install zellij --locked
      cargo install bat --locked
      cargo install lsd --locked
      cargo install du-dust --locked
      cargo install ripgrep --locked
      # cargo install starship --locked
      cd "${HOME}/.cargo/bin"
      sudo cp bat dust exa zellij rg /usr/local/bin
  }

  setup_zshrc_with_rust(){
      echo '. "${HOME}/.cargo/env"' >> "${HOME}/.zshrc"
      # echo 'eval "$(starship init zsh)"' >> "${HOME}/.zshrc"
      echo 'alias cat=bat' >> "${HOME}/.zshrc"
      echo 'alias ls=lsd' >> "${HOME}/.zshrc"
      echo 'alias du=dust' >> "${HOME}/.zshrc"
  }

  install_awscli(){
      mkdir -pv -- "${HOME}/AWS_CLI"
      cd "${HOME}/AWS_CLI"
      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      unzip awscliv2.zip
      sudo ./aws/install
  }

  y() {
  	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
  	yazi "$@" --cwd-file="$tmp"
  	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
  		builtin cd -- "$cwd"
  	fi
  	rm -f -- "$tmp"
  }
#+end_src

* bash

** Copy the config file
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./setup.sh
  C './HOME,.bashrc' "${HOME}/.bashrc"
#+end_src

** Main bash config

*** Starship
#+begin_src sh :shebang #!/bin/sh :results output :tangle  ./HOME,.bashrc
  eval -- "$(starship init bash --print-full-init)"
#+end_src

*** Source important functions
#+begin_src sh :shebang #!/bin/sh :results output :tangle  ./HOME,.bashrc
  . "${HOME}/important_functions.sh"
#+end_src

*** Setup convenient alias
#+begin_src sh :shebang #!/bin/sh :results output :tangle  ./HOME,.bashrc
  alias ls=lsd
  alias top='btm -b --process_command'
  alias cat=bat
#+end_src

* FISH

** Copy the config file
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./setup.sh
  mkdir -pv -- "${HOME}/.config/fish"
  cp -vf -- './HOME,.config,fish,config.fish' "${HOME}/.config/fish/config.fish"
#+end_src

** Main config file

*** sudo without password
#+begin_src conf :tangle ./HOME,.config,fish,config.fish
  export SUDO_ASKPASS={$HOME}/SUDO_ASKPASS
#+end_src

*** Setup the SUDO_ASKPASS command

**** compile and set up the code
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./setup.sh
  gcc -O2 -mtune=native -march=native ./SUDO_ASKPASS.c -o  "${HOME}/SUDO_ASKPASS"
#+end_src

**** The main code
#+begin_src c :tangle ./SUDO_ASKPASS.c
  #include <stdio.h>

  int main(int argc, char ** argv) {
    printf("asd\n");
  }
#+end_src


*** nice functions
#+begin_src conf :tangle ./HOME,.config,fish,config.fish
  function xs
      cd (fd -t d -t l | sk)
  end
#+end_src

*** nice abbreviations
#+begin_src conf :tangle ./HOME,.config,fish,config.fish
  abbr --add --position command -- ls lsd
  abbr --add --position command -- top btm -b --process_command
  abbr --add --position command -- cat bat
  abbr --add --position command -- du dust


  abbr --add --position command -- argc aria2c -c -x16 -j16

  abbr --add --position command -- qa sudo byobu-tmux
  abbr --add --position command -- aq sudo byobu-tmux

  abbr --add --position command -- az exec sudo -A byobu-tmux
  abbr --add --position command -- za exec sudo -A byobu-tmux

  abbr --add --position command -- cd z
  abbr --add --position command -- dc z
#+end_src

*** Vi bindings
#+begin_src conf :tangle ./HOME,.config,fish,config.fish
  fish_vi_key_bindings
#+end_src

*** yazi
#+begin_src conf :tangle ./HOME,.config,fish,config.fish
  function y
      set tmp (mktemp -t "yazi-cwd.XXXXXX")
      yazi $argv --cwd-file="$tmp"
      if set cwd (command cat -- "$tmp"); and [ -n "$cwd" ]; and [ "$cwd" != "$PWD" ]
          builtin cd -- "$cwd"
      end
      rm -f -- "$tmp"
  end
#+end_src

*** zoxide cd
#+begin_src conf :tangle ./HOME,.config,fish,config.fish
  # =============================================================================
  #
  # Utility functions for zoxide.
  #

  # pwd based on the value of _ZO_RESOLVE_SYMLINKS.
  function __zoxide_pwd
      builtin pwd -L
  end

  # A copy of fish's internal cd function. This makes it possible to use
  # `alias cd=z` without causing an infinite loop.
  if ! builtin functions --query __zoxide_cd_internal
      string replace --regex -- '^function cd\s' 'function __zoxide_cd_internal ' <$__fish_data_dir/functions/cd.fish | source
  end

  # cd + custom logic based on the value of _ZO_ECHO.
  function __zoxide_cd
      if set -q __zoxide_loop
          builtin echo "zoxide: infinite loop detected"
          builtin echo "Avoid aliasing `cd` to `z` directly, use `zoxide init --cmd=cd fish` instead"
          return 1
      end
      __zoxide_loop=1 __zoxide_cd_internal $argv
  end

  # =============================================================================
  #
  # Hook configuration for zoxide.
  #

  # Initialize hook to add new entries to the database.
  function __zoxide_hook --on-variable PWD
      test -z "$fish_private_mode"
      and command zoxide add -- (__zoxide_pwd)
  end

  # =============================================================================
  #
  # When using zoxide with --no-cmd, alias these internal functions as desired.
  #

  # Jump to a directory using only keywords.
  function __zoxide_z
      set -l argc (builtin count $argv)
      if test $argc -eq 0
          __zoxide_cd $HOME
      else if test "$argv" = -
          __zoxide_cd -
      else if test $argc -eq 1 -a -d $argv[1]
          __zoxide_cd $argv[1]
      else if test $argc -eq 2 -a $argv[1] = --
          __zoxide_cd -- $argv[2]
      else
          set -l result (command zoxide query --exclude (__zoxide_pwd) -- $argv)
          and __zoxide_cd $result
      end
  end

  # Completions.
  function __zoxide_z_complete
      set -l tokens (builtin commandline --current-process --tokenize)
      set -l curr_tokens (builtin commandline --cut-at-cursor --current-process --tokenize)

      if test (builtin count $tokens) -le 2 -a (builtin count $curr_tokens) -eq 1
          # If there are < 2 arguments, use `cd` completions.
          complete --do-complete "'' "(builtin commandline --cut-at-cursor --current-token) | string match --regex -- '.*/$'
      else if test (builtin count $tokens) -eq (builtin count $curr_tokens)
          # If the last argument is empty, use interactive selection.
          set -l query $tokens[2..-1]
          set -l result (command zoxide query --exclude (__zoxide_pwd) --interactive -- $query)
          and __zoxide_cd $result
          and builtin commandline --function cancel-commandline repaint
      end
  end
  complete --command __zoxide_z --no-files --arguments '(__zoxide_z_complete)'

  # Jump to a directory using interactive search.
  function __zoxide_zi
      set -l result (command zoxide query --interactive -- $argv)
      and __zoxide_cd $result
  end

  # =============================================================================
  #
  # Commands for zoxide. Disable these using --no-cmd.
  #

  abbr --erase z &>/dev/null
  alias z=__zoxide_z

  abbr --erase zi &>/dev/null
  alias zi=__zoxide_zi

  # =============================================================================
  #
  # To initialize zoxide, add this to your configuration (usually
  # ~/.config/fish/config.fish):
  #
  #   zoxide init fish | source
#+end_src

*** atuin history
#+begin_src conf :tangle ./HOME,.config,fish,config.fish
  set -gx ATUIN_SESSION (atuin uuid)
  set --erase ATUIN_HISTORY_ID

  function _atuin_preexec --on-event fish_preexec
      if not test -n "$fish_private_mode"
          set -g ATUIN_HISTORY_ID (atuin history start -- "$argv[1]")
      end
  end

  function _atuin_postexec --on-event fish_postexec
      set -l s $status

      if test -n "$ATUIN_HISTORY_ID"
          ATUIN_LOG=error atuin history end --exit $s -- $ATUIN_HISTORY_ID &>/dev/null &
          disown
      end

      set --erase ATUIN_HISTORY_ID
  end

  function _atuin_search
      set -l keymap_mode
      switch $fish_key_bindings
          case fish_vi_key_bindings
              switch $fish_bind_mode
                  case default
                      set keymap_mode vim-normal
                  case insert
                      set keymap_mode vim-insert
              end
          case '*'
              set keymap_mode emacs
      end

      # In fish 3.4 and above we can use `"$(some command)"` to keep multiple lines separate;
      # but to support fish 3.3 we need to use `(some command | string collect)`.
      # https://fishshell.com/docs/current/relnotes.html#id24 (fish 3.4 "Notable improvements and fixes")
      set -l ATUIN_H (ATUIN_SHELL_FISH=t ATUIN_LOG=error ATUIN_QUERY=(commandline -b) atuin search --keymap-mode=$keymap_mode $argv -i 3>&1 1>&2 2>&3 | string collect)

      if test -n "$ATUIN_H"
          if string match --quiet '__atuin_accept__:*' "$ATUIN_H"
            set -l ATUIN_HIST (string replace "__atuin_accept__:" "" -- "$ATUIN_H" | string collect)
            commandline -r "$ATUIN_HIST"
            commandline -f repaint
            commandline -f execute
            return
          else
            commandline -r "$ATUIN_H"
          end
      end

      commandline -f repaint
  end

  function _atuin_bind_up
      # Fallback to fish's builtin up-or-search if we're in search or paging mode
      if commandline --search-mode; or commandline --paging-mode
          up-or-search
          return
      end

      # Only invoke atuin if we're on the top line of the command
      set -l lineno (commandline --line)

      switch $lineno
          case 1
              _atuin_search --shell-up-key-binding
          case '*'
              up-or-search
      end
  end

  bind \cr _atuin_search
  if bind -M insert > /dev/null 2>&1
  bind -M insert \cr _atuin_search
  end
#+end_src

*** starship prompt
#+begin_src conf :tangle ./HOME,.config,fish,config.fish
  function fish_prompt
      switch "$fish_key_bindings"
          case fish_hybrid_key_bindings fish_vi_key_bindings
              set STARSHIP_KEYMAP "$fish_bind_mode"
          case '*'
              set STARSHIP_KEYMAP insert
      end
      set STARSHIP_CMD_PIPESTATUS $pipestatus
      set STARSHIP_CMD_STATUS $status
      # Account for changes in variable name between v2.7 and v3.0
      set STARSHIP_DURATION "$CMD_DURATION$cmd_duration"
      set STARSHIP_JOBS (count (jobs -p))
      if test "$TRANSIENT" = "1"
          set -g TRANSIENT 0
          # Clear from cursor to end of screen as `commandline -f repaint` does not do this
          # See https://github.com/fish-shell/fish-shell/issues/8418
          printf \e\[0J
          if type -q starship_transient_prompt_func
              starship_transient_prompt_func
          else
              printf "\e[1;32m❯\e[0m "
          end
      else
          starship prompt --terminal-width="$COLUMNS" --status=$STARSHIP_CMD_STATUS --pipestatus="$STARSHIP_CMD_PIPESTATUS" --keymap=$STARSHIP_KEYMAP --cmd-duration=$STARSHIP_DURATION --jobs=$STARSHIP_JOBS
      end
  end

  function fish_right_prompt
      switch "$fish_key_bindings"
          case fish_hybrid_key_bindings fish_vi_key_bindings
              set STARSHIP_KEYMAP "$fish_bind_mode"
          case '*'
              set STARSHIP_KEYMAP insert
      end
      set STARSHIP_CMD_PIPESTATUS $pipestatus
      set STARSHIP_CMD_STATUS $status
      # Account for changes in variable name between v2.7 and v3.0
      set STARSHIP_DURATION "$CMD_DURATION$cmd_duration"
      set STARSHIP_JOBS (count (jobs -p))
      if test "$RIGHT_TRANSIENT" = "1"
          set -g RIGHT_TRANSIENT 0
          if type -q starship_transient_rprompt_func
              starship_transient_rprompt_func
          else
              printf ""
          end
      else
          starship prompt --right --terminal-width="$COLUMNS" --status=$STARSHIP_CMD_STATUS --pipestatus="$STARSHIP_CMD_PIPESTATUS" --keymap=$STARSHIP_KEYMAP --cmd-duration=$STARSHIP_DURATION --jobs=$STARSHIP_JOBS
      end
  end

  # Disable virtualenv prompt, it breaks starship
  set -g VIRTUAL_ENV_DISABLE_PROMPT 1

  # Remove default mode prompt
  builtin functions -e fish_mode_prompt

  set -gx STARSHIP_SHELL "fish"

  # Transience related functions
  function reset-transient --on-event fish_postexec
      set -g TRANSIENT 0
      set -g RIGHT_TRANSIENT 0
  end

  function transient_execute
      if commandline --is-valid || test -z "$(commandline)" && not commandline --paging-mode
          set -g TRANSIENT 1
          set -g RIGHT_TRANSIENT 1
          commandline -f repaint
      end
      commandline -f execute
  end

  # --user is the default, but listed anyway to make it explicit.
  function enable_transience --description 'enable transient prompt keybindings'
      bind --user \r transient_execute
      bind --user -M insert \r transient_execute
  end

  # Erase the transient prompt related key bindings.
  # --user is the default, but listed anyway to make it explicit.
  # Erasing a user binding will revert to the preset.
  function disable_transience --description 'remove transient prompt keybindings'
      bind --user -e \r
      bind --user -M insert -e \r
  end


  # Set up the session key that will be used to store logs
  # We don't use `random [min] [max]` because it is unavailable in older versions of fish shell
  set -gx STARSHIP_SESSION_KEY (string sub -s1 -l16 (random)(random)(random)(random)(random)0000000000000000)
#+end_src
