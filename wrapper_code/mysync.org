#+begin_src emacs-lisp :tangle yes
  (save-buffer)
  (org-babel-tangle)
  (async-shell-command "./mysync.sh" "log" "error")
#+end_src

#+RESULTS:
: #<window 2872 on log>

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./mysync.sh
  cd "$('dirname' '--' "${0}")"
  'gcc' './mysync.c' '-Ofast' '-mtune=native' '-march=native' '-static' '-o' './mysync.exe'
  'mv' '-vf' '--' './mysync.exe' "${HOME}/bin/mysync"
#+end_src

#+RESULTS:

* Main code

** Includes
#+begin_src c :tangle ./mysync.c
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
  #include <unistd.h>
#+end_src

** Define constants
#+begin_src c :tangle ./mysync.c
  #define BUFFER_ALIGNMENT_POW 3
  #define BUFFER_DIVISION_CHECK ((1 << BUFFER_ALIGNMENT_POW) - 1)
  #define BUFFER_SIZE_POW 21
  #define BUFFER_SIZE (1 << BUFFER_SIZE_POW << BUFFER_ALIGNMENT_POW)
#+end_src

** COMMENT Constants as variables
#+begin_src c :tangle ./mysync.c
  static unsigned char const BUFFER_ALIGNMENT_POW = 3;
  static unsigned char const BUFFER_DIVISION_CHECK =
      (1 << BUFFER_ALIGNMENT_POW) - 1;
  static unsigned char const BUFFER_SIZE_POW = 21;
  static unsigned long const BUFFER_SIZE = 1 << BUFFER_SIZE_POW
                                             << BUFFER_ALIGNMENT_POW;
#+end_src

** Define buffers
#+begin_src c :tangle ./mysync.c
  static unsigned char BUFFER[BUFFER_SIZE];
  static unsigned long BUFFER_CURRENT_POSITION = 0;
#+end_src

** Main memory allocation code
#+begin_src c :tangle ./mysync.c
  static unsigned char *BUFFER_GET_CURRENT_POSITION() {
    return BUFFER + (BUFFER_CURRENT_POSITION << BUFFER_ALIGNMENT_POW);
  }

  static unsigned char *BUFFER_ALLOC_POW(unsigned long const in) {
    unsigned char *ret = BUFFER_GET_CURRENT_POSITION();
    BUFFER_CURRENT_POSITION += in;
    return ret;
  }

  static unsigned char *BUFFER_ALLOC(unsigned long const in) {
    unsigned long const tmp = in >> BUFFER_ALIGNMENT_POW;
    if (in & BUFFER_DIVISION_CHECK) {
      return BUFFER_ALLOC_POW(tmp + 1);
    } else {
      return BUFFER_ALLOC_POW(tmp);
    }
  }
#+end_src

** Extra argument additions to rsync
#+begin_src c :tangle ./mysync.c
  static char *rsync_path = "/usr/bin/rsync";
  static char *arg1 = "-avh";
  static char *arg2 = "--progress";
#+end_src

** The main function
#+begin_src c :tangle ./mysync.c
  int main(int const argc, char **argv) {
    int const total_size = argc + 3;

    char **argv_new = (char **)BUFFER_ALLOC(
        /*unsigned long const in =*/total_size * sizeof(char *));

    argv_new[0] = argv[0];
    argv_new[1] = arg1;
    argv_new[2] = arg2;
    argv_new[argc + 2] = NULL;

    for (int i = 1; i < argc; ++i) {
      argv_new[2 + i] = argv[i];
    }

    int ret = execvp(/*const char *file =*/rsync_path,
                     /*char *const argv[] =*/argv_new);

    return ret;
  }
#+end_src

#+begin_src c :tangle ./mysync.c
#+end_src
