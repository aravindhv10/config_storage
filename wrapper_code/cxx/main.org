* Work space

** elisp
#+begin_src emacs-lisp
  (save-buffer)
  (org-babel-tangle)
  (async-shell-command "./main.sh" "log" "error")
#+end_src

#+RESULTS:
: #<window 3180 on log>

** shell
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./main.sh
  cd "$('dirname' '--' "${0}")"
  'gcc' './main.c' '-Ofast' '-mtune=native' '-march=native' '-static' '-o' './main.exe'
  'mv' '-vf' '--' './main.exe' "${HOME}/bin/cxx"
#+end_src

#+RESULTS:

* Main code

** Includes
#+begin_src c :tangle ./main.c
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
  #include <unistd.h>
#+end_src

** Define constants
#+begin_src c :tangle ./main.c
  #define BUFFER_ALIGNMENT_POW 3
  #define BUFFER_DIVISION_CHECK ((1 << BUFFER_ALIGNMENT_POW) - 1)
  #define BUFFER_SIZE_POW 21
  #define BUFFER_SIZE (1 << BUFFER_SIZE_POW << BUFFER_ALIGNMENT_POW)
#+end_src

** COMMENT Constants as variables
#+begin_src c :tangle ./main.c
  static unsigned char const BUFFER_ALIGNMENT_POW = 3;
  static unsigned char const BUFFER_DIVISION_CHECK = (1 << BUFFER_ALIGNMENT_POW) - 1;
  static unsigned char const BUFFER_SIZE_POW = 21;
  static unsigned long const BUFFER_SIZE = 1 << BUFFER_SIZE_POW << BUFFER_ALIGNMENT_POW;
#+end_src

** Define buffers
#+begin_src c :tangle ./main.c
  static unsigned char BUFFER[BUFFER_SIZE];
  static unsigned long BUFFER_CURRENT_POSITION = 0;
#+end_src

** Main memory allocation code
#+begin_src c :tangle ./main.c
  static inline unsigned char *BUFFER_GET_CURRENT_POSITION() {
    return BUFFER + (BUFFER_CURRENT_POSITION << BUFFER_ALIGNMENT_POW);
  }

  static inline unsigned char *BUFFER_ALLOC_POW(unsigned long const in) {
    unsigned char *ret = BUFFER_GET_CURRENT_POSITION();
    BUFFER_CURRENT_POSITION += in;
    return ret;
  }

  static inline unsigned char *BUFFER_ALLOC(unsigned long const in) {
    unsigned long const tmp = in >> BUFFER_ALIGNMENT_POW;
    if (in & BUFFER_DIVISION_CHECK) {
      return BUFFER_ALLOC_POW(tmp + 1);
    } else {
      return BUFFER_ALLOC_POW(tmp);
    }
  }
#+end_src

** Extra argument additions to rsync
#+begin_src c :tangle ./main.c
  static char *exe_path = "/usr/bin/g++";
  static char *argvs[] = {"-Ofast", "-mtune=native", "-march=native"};
#+end_src

** Function to generate command line argumnets
#+begin_src c :tangle ./main.c
  #define push(NAME)                                                             \
    argv_new[index] = NAME;                                                      \
    index += 1

  char **get_argv(int const argc, char **argv) {
    int const total_size = argc + 4;

    char **argv_new = (char **)BUFFER_ALLOC(
        /*unsigned long const in =*/total_size * sizeof(char *));

    int index = 0;

    push(exe_path);
    push(argvs[0]);
    push(argvs[1]);
    push(argvs[2]);
    for (int i = 1; i < argc; ++i) {
      push(argv[i]);
    }
    push(NULL);

    return argv_new;
  }

  #undef push
#+end_src

** The main function
#+begin_src c :tangle ./main.c
  int main(int const argc, char **argv) {
    char **argv_new = get_argv(/*int const argc =*/argc, /*char **argv =*/argv);
    int const ret = execvp(/*const char *file =*/argv_new[0],
                           /*char *const argv[] =*/argv_new);
    return ret;
  }
#+end_src
