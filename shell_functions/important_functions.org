* COMMENT Work space

** elisp
#+begin_src elisp :results output
  (save-buffer)
  (save-some-buffers)
  (org-babel-tangle)
#+end_src

#+RESULTS:

* COMMENT Sample

** python
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./important_functions.py
#+end_src

** shell
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
#+end_src

* Interesting links:

** histogram equalization
https://www.geeksforgeeks.org/clahe-histogram-eqalization-opencv/

* Set cuda version:
#+begin_src sh :shebang #!/bin/sh :results output
  export CUDA_HOME="/usr/local/cuda-12/"
  export PATH="/usr/local/cuda-12/bin/:$PATH"
  export LD_LIBRARY_PATH="/usr/local/cuda-12/lib64:$LD_LIBRARY_PATH"
#+end_src

* Python:

** Function to remove extension from the name of a file:
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./important_functions.py
  def remove_extension(path_input):
      loc = path_input.rfind('.')
      return path_input[0:loc]
#+end_src

** safe_mkdir:
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./important_functions.py
  import os


  def mkdir_safe(out_path):
      if type(out_path) == str:
          if len(out_path) > 0:
              if not os.path.exists(out_path):
                  os.mkdir(out_path)
#+end_src

** Download file using aria2c:
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./important_functions.py
  import subprocess


  def download_file_with_aria(path_file, url):
      path_file = os.path.realpath(path_file)
      DIR = os.path.dirname(path_file)
      FILE = os.path.basename(path_file)
      subprocess.run(['mkdir', '-pv', '--', DIR])
      os.chdir(DIR)
      subprocess.run(['aria2c', '-c', '-x16', '-j16', url, '--out', FILE])
#+end_src

** Check if name is image:
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./important_functions.py
  import os


  def is_file_image(path_input):

      if not os.path.isdir(path_input):

          path_input = path_input.lower()

          if path_input.endswith('.png') or path_input.endswith(
                  '.jpg') or path_input.endswith('.jpeg'):

              return True

      return False
#+end_src

** Function to resize images:
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./important_functions.py
  import cv2


  def do_resize_image_good(inpath, outpath, outres):

      img = cv2.imread(inpath, cv2.IMREAD_COLOR)
      img = img[:, :, 0:3]

      if img.shape[0] < img.shape[1]:

          size_y = outres
          frac = outres / size_y
          size_x = int(img.shape[1] * frac)

      else:

          size_x = outres
          frac = outres / size_x
          size_y = int(img.shape[0] * frac)

      if frac > 1:
          inter = cv2.INTER_CUBIC
      elif frac < 1:
          inter = cv2.INTER_AREA

      img = cv2.resize(img, (size_x, size_y), inter)

      cv2.imwrite(outpath, img)


  def do_resize_mask_good(inpath, outpath, outres):

      img = cv2.imread(inpath, cv2.IMREAD_COLOR)
      img = img[:, :, 0:3]

      if img.shape[0] < img.shape[1]:

          size_y = outres
          frac = outres / size_y
          size_x = int(img.shape[1] * frac)

      else:

          size_x = outres
          frac = outres / size_x
          size_y = int(img.shape[0] * frac)

      inter = cv2.INTER_NEAREST_EXACT

      img = cv2.resize(img, (size_x, size_y), inter)

      cv2.imwrite(outpath, img)
#+end_src

** Opencv function to load and save image in RGB format:
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./important_functions.py
  import cv2


  def load_image_cv2(path_input_image):
      img = cv2.imread(path_input_image, cv2.IMREAD_COLOR)
      img = img[:, :, 0:3]
      img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
      return img


  def save_image_cv2(image_input, path_image_output):
      image_input = cv2.cvtColor(image_input[:, :, 0:3], cv2.COLOR_RGB2BGR)
      cv2.imwrite(path_image_output, image_input)
#+end_src

** Cuda related functions:
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./important_functions.py
  import torch
  import gc


  def get_good_device_and_dtype():
      device = "cpu"
      dtype = torch.float32

      if torch.cuda.is_available():
          torch.backends.cudnn.benchmark = True
          device = "cuda:0"
          dtype = torch.float16
          if torch.cuda.get_device_capability()[0] >= 8:
              dtype = torch.bfloat16

      device = torch.device(device)

      return device, dtype


  def flush_cuda():
      if torch.cuda.is_available():
          torch.cuda.empty_cache()
      gc.collect()
#+end_src

* Important functions:

** [Download / Upload] [from / to] s3
#+begin_src sh :shebang #!/usr/bin/fish :results output
  MAIN_DIR='MODEL_CHECKPOINTS/'
  LOCAL="${HOME}/${MAIN_DIR}"
  S3="s3://s3_home/${MAIN_DIR}"

  push_sync(){
      aws s3 sync "${LOCAL}" "${S3}"
  }

  pull_sync(){
      aws s3 sync "${S3}" "${LOCAL}"
  }

  push(){
      aws s3 cp "${LOCAL}" "${S3}"
  }

  pull(){
      aws s3 cp "${S3}" "${LOCAL}" 
  }
#+end_src

** Installing flatpak
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  install_flatpak(){
      which flatpak && return
      if test  "$('whoami')" = 'root'
      then
          apt-get install -y flatpak
      else
          sudo apt-get install -y flatpak
      fi
  }
#+end_src

** Fast download file:

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  install_aria(){
      if test  "$('whoami')" = 'root'
      then
          apt-get install -y aria2
      else
          sudo apt-get install -y aria2
      fi
  }

  do_download() {
      which aria2c || install_aria

      test -e "${HOME}/TMP/${2}.aria2" \
          && aria2c -c -x16 -j16 "${1}" -o "${2}" -d "${HOME}/TMP/" ;

      test -e "${HOME}/TMP/${2}" \
          || aria2c -c -x16 -j16 "${1}" -o "${2}" -d "${HOME}/TMP/" ;
  }

  do_link(){
      mkdir -pv -- "$(dirname -- "${2}")"
      ln -vfs -- "${HOME}/SHA512SUM/${1}" "${2}"
  }

  adown(){
      mkdir -pv -- "${HOME}/TMP" "${HOME}/SHA512SUM"

      test "${#}" '-ge' '4' && do_link "${3}" "${4}"

      test "${#}" '-ge' '3' && test -e "${HOME}/SHA512SUM/${3}" && return 0

      cd "${HOME}/TMP"

      do_download "${1}" "${2}"

      HASH="$(sha512sum "${2}" | cut -d ' ' -f1)"

      test "${#}" '-ge' '3' && test "${3}" '=' "${HASH}" && mv -vf -- "${2}" "${HOME}/SHA512SUM/${HASH}"

      test "${#}" '-ge' '4' && do_link "${3}" "${4}"
  }
#+end_src

** Function to pull from huggingface repo:

*** For regular shell:
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  get_repo_hf(){
      DIR_BASE="${HOME}/HUGGINGFACE"
      DIR_REPO="$('echo' "${1}" | 'sed' 's@^https://huggingface.co/@@g ; s@/tree/main$@@g')"
      DIR_FULL="${DIR_BASE}/${DIR_REPO}"
      URL="$('echo' "${1}" | 'sed' 's@/tree/main$@@g')"

      mkdir '-pv' '--' "$('dirname' '--' "${DIR_FULL}")"
      cd "$('dirname' '--' "${DIR_FULL}")"
      git clone "${URL}"
      cd "${DIR_FULL}"
      git pull
      git submodule update --recursive --init
  }
#+end_src

** Function to pull git repo:

*** for github
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  get_repo(){
      DIR_REPO="${HOME}/GITHUB/$('echo' "${1}" | 'sed' 's/^git@github.com://g ; s@^https://github.com/@@g ; s@.git$@@g' )"
      DIR_BASE="$('dirname' '--' "${DIR_REPO}")"

      mkdir -pv -- "${DIR_BASE}"
      cd "${DIR_BASE}"
      git clone "${1}"
      cd "${DIR_REPO}"

      if test "${#}" '-ge' '2'
      then
          git switch "${2}"
      else
          git switch main
      fi

      git pull
      git submodule update --recursive --init

      if test "${#}" '-ge' '3'
      then
          git checkout "${3}"
      fi
  }
#+end_src

** setup zsh
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  install_zsh(){
      if test  "$('whoami')" = 'root'
      then
          apt-get update && apt-get install zsh fonts-firacode zip
      else
          sudo apt-get update && sudo apt-get install zsh fonts-firacode zip
      fi
  }

  get_ohmyzsh(){
      which zsh || install_zsh
      get_repo 'https://github.com/ohmyzsh/ohmyzsh.git'
      test -d "${HOME}/.oh-my-zsh" && rm -rf "${HOME}/.oh-my-zsh"
      test -L "${HOME}/.oh-my-zsh" || ln -vfs "./GITHUB/ohmyzsh/ohmyzsh" "${HOME}/.oh-my-zsh"
      cp "${HOME}/.oh-my-zsh/templates/zshrc.zsh-template" "${HOME}/.zshrc"

      get_repo 'https://github.com/spaceship-prompt/spaceship-prompt.git'
      ln -vfs "${HOME}/GITHUB/spaceship-prompt/spaceship-prompt" "${HOME}/.oh-my-zsh/custom/themes/"
      ln -vfs "${HOME}/.oh-my-zsh/custom/themes/spaceship-prompt/spaceship.zsh-theme" "${HOME}/.oh-my-zsh/custom/themes/spaceship.zsh-theme"
      echo 'ZSH_THEME="spaceship"'  >> "${HOME}/.zshrc"
      echo 'bindkey -v' >> "${HOME}/.zshrc"
  }

  install_rust(){
      . "${HOME}/.cargo/env"
      which cargo || curl --proto '=https' --tlsv1.2 -sSf 'https://sh.rustup.rs' | sh
      . "${HOME}/.cargo/env"
      cargo install zellij --locked
      cargo install bat --locked
      cargo install lsd --locked
      cargo install du-dust --locked
      cargo install ripgrep --locked
      # cargo install starship --locked
      cd "${HOME}/.cargo/bin"
      sudo cp bat dust exa zellij rg /usr/local/bin
  }

  setup_zshrc_with_rust(){
      echo '. "${HOME}/.cargo/env"' >> "${HOME}/.zshrc"
      # echo 'eval "$(starship init zsh)"' >> "${HOME}/.zshrc"
      echo 'alias cat=bat' >> "${HOME}/.zshrc"
      echo 'alias ls=lsd' >> "${HOME}/.zshrc"
      echo 'alias du=dust' >> "${HOME}/.zshrc"
  }

  install_awscli(){
      mkdir -pv -- "${HOME}/AWS_CLI"
      cd "${HOME}/AWS_CLI"
      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      unzip awscliv2.zip
      sudo ./aws/install
  }
#+end_src

** using yazi
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  function y() {
  	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
  	yazi "$@" --cwd-file="$tmp"
  	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
  		builtin cd -- "$cwd"
  	fi
  	rm -f -- "$tmp"
  }
#+end_src

** Installing rust packages

*** Main function:
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  get_rust_package(){
      get_repo "${1}"
      . '/usr/lib/sdk/rust-stable/enable.sh'
      cargo build --release
      mkdir -pv -- "${HOME}/RUST/exe/"
      if test "${#}" '-ge' '2'
      then
          shift
          cd 'target/release'
          cp -vf -- ${@} "${HOME}/RUST/exe/"
      else
          cd 'target/release'
          find ./ -maxdepth 1 -type f -executable -exec cp -vf -- {} "${HOME}/RUST/exe/" ';'
      fi
  }
#+end_src

*** Important packages
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./important_functions.sh
  get_rust_packages_standard(){
      get_rust_package 'https://github.com/alacritty/alacritty.git'
      get_rust_package 'https://github.com/konradsz/igrep.git'
      get_rust_package 'https://github.com/svenstaro/miniserve.git'
      get_rust_package 'https://github.com/atuinsh/atuin.git'
      get_rust_package 'https://github.com/sharkdp/bat.git'
      get_rust_package 'https://github.com/bootandy/dust.git'
      get_rust_package 'https://github.com/sharkdp/fd.git'
      get_rust_package 'https://github.com/lsd-rs/lsd.git'
      get_rust_package 'https://github.com/nushell/nushell.git'
      get_rust_package 'https://github.com/BurntSushi/ripgrep.git'
      get_rust_package 'https://github.com/astral-sh/ruff.git'
      get_rust_package 'https://github.com/skim-rs/skim.git'
      get_rust_package 'https://github.com/starship/starship.git'
      get_rust_package 'https://github.com/sxyazi/yazi.git'
      get_rust_package 'https://github.com/zellij-org/zellij.git'
      get_rust_package 'https://github.com/ajeetdsouza/zoxide.git'
      get_rust_package 'https://github.com/astral-sh/uv.git'
      get_rust_package 'https://github.com/helix-editor/helix.git'
      get_rust_package 'https://github.com/ClementTsang/bottom.git'
      get_rust_package 'https://github.com/Wilfred/difftastic.git'
  }
#+end_src
