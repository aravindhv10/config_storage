* COMMENT WORK SPACE

** ELISP
#+begin_src emacs-lisp :results silent
  (save-buffer)
  (org-babel-tangle)
  (async-shell-command "
      git add 'M_A_0'
      git add 'M_A_1'
      git add 'M_A_2'
      git add 'M_A_3'
      git add 'M_A_4'
      git add 'M_A_5'
      git add 'M_A_6'
      git add 'M_A_7'
      git add 'M_A_8'
      git add 'M_A_9'
      git add 'M_A_A'
      git add 'M_A_D'
      git add 'M_A_E'
      git add 'M_A_F'
      git add 'M_A_G'
      git add 'M_A_Q'
      git add 'M_A_R'
      git add 'M_A_S'
      git add 'M_A_T'
      git add 'M_A_W'
      git add 'M_C_0'
      git add 'M_C_1'
      git add 'M_C_2'
      git add 'M_C_3'
      git add 'M_C_4'
      git add 'M_C_5'
      git add 'M_C_6'
      git add 'M_C_7'
      git add 'M_C_8'
      git add 'M_C_9'
      git add 'M_C_A'
      git add 'M_C_D'
      git add 'M_C_E'
      git add 'M_C_ESC'
      git add 'M_C_F'
      git add 'M_C_G'
      git add 'M_C_Q'
      git add 'M_C_R'
      git add 'M_C_S'
      git add 'M_C_T'
      git add 'M_C_W'
      git add 'M_ESC'
      git add 'M_F1'
      git add 'M_F2'
      git add 'M_F3'
      git add 'README.org'
      git add 'copy.sh'
      git add 'enter_emacs_flatpak'
  " "log" "err")
#+end_src

** PYTHON
#+begin_src python :shebang #!/usr/bin/python3 :results output :tangle ./work.py
  def printer(asd):
      print("#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_" + str(asd))
      print("kill (echo ...(ps | where name =~ firefox).pid)")
      print("#+end_src")
      print("")

  mylist = [
      '1',
      '2',
      '3',
      '4',
      '5',
      '6',
      '7',
      '8',
      '9',
      '0',
      'Q',
      'W',
      'E',
      'R',
      'T',
      'A',
      'S',
      'D',
      'F',
      'G',
  ]
  for i in mylist:
      printer(asd=i)
#+end_src

* Script to copy the other scripts:
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./copy.sh
  cd "$('dirname' '--' "${0}")"
  echo 'START COPYING' \
      && find './' '-type' 'f' \
          | grep '^\./M_.*$' \
          | sed 's@^@("cp" "-vf" "--" "@g ; s@$@" "/usr/local/bin/");@g' \
          | sh \
  && echo 'DONE COPYING' ;
#+end_src

* Simples

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./enter_emacs_flatpak
  export SHELL='bash'
  exec flatpak \
      'run' \
      '--talk-name=org.freedesktop.Flatpak' \
      '--command=bash' \
      'org.gnu.emacs' \
  ;
#+end_src


#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_ESC
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_ESC
exec wlogout
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_F1
  exec "alacritty" "msg" "create-window" "-e" "byobu-tmux"
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_F2
  exec "alacritty" "msg" "create-window"
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_F3
  export SHELL='bash'
  exec flatpak \
      'run' \
      '--talk-name=org.freedesktop.Flatpak' \
      '--command=/bin/bash' \
      'org.gnu.emacs' \
      '-c' \
      '
          export PATH="/var/tmp/all/bin:/usr/bin:/bin:/usr/sbin:/sbin:/app/bin";
          . "/usr/lib/sdk/bazel/enable.sh";
          . "/usr/lib/sdk/llvm19/enable.sh";
          . "/usr/lib/sdk/rust-stable/enable.sh";
          . "/usr/lib/sdk/texlive/enable.sh";
          exec "/app/bin/emacsclient" "-c";
      ' \
  ;
#+end_src

* Controls

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_1
  export SHELL='bash'
  exec flatpak \
      'run' \
      '--talk-name=org.freedesktop.Flatpak' \
      '--command=/bin/bash' \
      'org.gnu.emacs' \
      '-c' \
      '
          export PATH="/var/tmp/all/bin:/usr/bin:/bin:/usr/sbin:/sbin:/app/bin";
          . "/usr/lib/sdk/bazel/enable.sh";
          . "/usr/lib/sdk/llvm19/enable.sh";
          . "/usr/lib/sdk/rust-stable/enable.sh";
          . "/usr/lib/sdk/texlive/enable.sh";
          exec "/app/bin/emacs-wrapper" "-c";
      ' \
  ;
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_2
  exec M_F3
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_3
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_4
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_5
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_6
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_7
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_8
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_9
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_0
  exec waybar
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_Q
  exec flatpak run org.wezfurlong.wezterm
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_W
  exec "alacritty" "msg" "create-window" "-e" "byobu-tmux"
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_E
  exec "alacritty" "msg" "create-window" "-e" "enter_emacs_flatpak"
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_R
  exec "footclient" "-e" "enter_emacs_flatpak"
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_T
  "alacritty" "-e" "byobu-tmux" &
  "foot" "-s" &
  wait
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_A
  exec flatpak run org.mozilla.firefox
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_S
  exec flatpak run com.brave.Browser
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_D
  exec dolphin
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_F
  exec pavucontrol
#+end_src

#+begin_src sh :shebang #!/bin/sh :results output :tangle ./M_C_G
  exec footclient nmtui
#+end_src

* Alts

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_1
  for i in (ps | where name == emacs_server).pid {kill  $i}
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_2
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_3
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_4
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_5
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_6
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_7
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_8
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_9
  for i in (ps | where name == mako).pid {kill  $i}
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_0
  for i in (ps | where name == waybar).pid {kill  $i}
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_Q
  for i in (ps | where name =~ wezterm).pid {kill  $i}
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_W
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_E
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_R
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_T
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_A
  for i in (ps | where name =~ firefox).pid {kill  $i}
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_S
  for i in (ps | where name == brave).pid {kill  $i}
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_D
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_F
#+end_src

#+begin_src sh :shebang #!/usr/local/bin/nu :tangle ./M_A_G
#+end_src
